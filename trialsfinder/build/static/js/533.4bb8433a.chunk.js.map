{"version":3,"file":"static/js/533.4bb8433a.chunk.js","mappings":"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","sources":["api/subscriptions.ts","pages/SubscriptionPage.tsx"],"sourcesContent":["import api from '../utils/api';\r\n\r\nexport const subscriptionsAPI = {\r\n  getPaymentMethods: () => api.get('/subscriptions/payment-methods/'),\r\n  addPaymentMethod: (data: any) => api.post('/subscriptions/payment-methods/', data),\r\n  deletePaymentMethod: (id: number) => api.delete(`/subscriptions/payment-methods/${id}/`),\r\n  setDefaultPaymentMethod: (id: number) => api.post(`/subscriptions/payment-methods/${id}/set-default/`),\r\n  getSubscriptions: () => api.get('/subscriptions/'),\r\n  createSubscription: (data: any) => api.post('/subscriptions/create/', data),\r\n  getInvoices: () => api.get('/subscriptions/invoices/'),\r\n  updateAddress: (address: string) => api.post('/subscriptions/update-address/', { address }),\r\n};","import React, { useEffect, useState } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport { subscriptionsAPI } from '../api/subscriptions';\r\nimport { PaymentMethod, Subscription } from '../types';\r\n\r\nexport const SubscriptionPage: React.FC = () => {\r\n  const { trialId } = useParams<{ trialId?: string }>();\r\n  const navigate = useNavigate();\r\n  const [paymentMethods, setPaymentMethods] = useState<PaymentMethod[]>([]);\r\n  const [subscriptions, setSubscriptions] = useState<Subscription[]>([]);\r\n  const [invoices, setInvoices] = useState<any[]>([]);\r\n  const [address, setAddress] = useState('');\r\n  const [newMethod, setNewMethod] = useState({\r\n    method_type: 'credit_card',\r\n    last_four: '',\r\n    is_default: false\r\n  });\r\n\r\n  useEffect(() => {\r\n    loadData();\r\n  }, []);\r\n\r\n  const loadData = async () => {\r\n    try {\r\n      const methodsRes = await subscriptionsAPI.getPaymentMethods();\r\n      setPaymentMethods(methodsRes.data);\r\n\r\n      const subsRes = await subscriptionsAPI.getSubscriptions();\r\n      setSubscriptions(subsRes.data);\r\n\r\n      const invoicesRes = await subscriptionsAPI.getInvoices();\r\n      setInvoices(invoicesRes.data);\r\n    } catch (error) {\r\n      console.error('Failed to load subscription data:', error);\r\n    }\r\n  };\r\n\r\n  const handleAddPaymentMethod = async () => {\r\n    try {\r\n      await subscriptionsAPI.addPaymentMethod(newMethod);\r\n      loadData();\r\n      setNewMethod({ method_type: 'credit_card', last_four: '', is_default: false });\r\n    } catch (error) {\r\n      console.error('Failed to add payment method:', error);\r\n    }\r\n  };\r\n\r\n  const handleDeleteMethod = async (id: number) => {\r\n    try {\r\n      await subscriptionsAPI.deletePaymentMethod(id);\r\n      loadData();\r\n    } catch (error) {\r\n      console.error('Failed to delete payment method:', error);\r\n    }\r\n  };\r\n\r\n  const handleSetDefault = async (id: number) => {\r\n    try {\r\n      await subscriptionsAPI.setDefaultPaymentMethod(id);\r\n      loadData();\r\n    } catch (error) {\r\n      console.error('Failed to set default payment method:', error);\r\n    }\r\n  };\r\n\r\n  const handleUpdateAddress = async () => {\r\n    try {\r\n      await subscriptionsAPI.updateAddress(address);\r\n      alert('Address updated');\r\n    } catch (error) {\r\n      console.error('Failed to update address:', error);\r\n    }\r\n  };\r\n\r\n  const handlePayment = async (methodId: number) => {\r\n    if (!trialId) {\r\n      return;\r\n    }\r\n    try {\r\n      await subscriptionsAPI.createSubscription({\r\n        trial_id: parseInt(trialId),\r\n        payment_method_id: methodId\r\n      });\r\n      navigate('/payment-success');\r\n    } catch (error) {\r\n      console.error('Payment failed:', error);\r\n    }\r\n  };\r\n\r\n  if (trialId) {\r\n    return (\r\n      <div>\r\n        <h1>Payment for Trial</h1>\r\n        <h3>Select Payment Method</h3>\r\n        {paymentMethods.map(method => (\r\n          <div key={method.id}>\r\n            <span>{method.method_type} ending in {method.last_four}</span>\r\n            <button onClick={() => handlePayment(method.id)}>Pay with this method</button>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>Subscription Management</h1>\r\n\r\n      <h2>Your Subscriptions</h2>\r\n      {subscriptions.map(sub => (\r\n        <div key={sub.id}>\r\n          <h3>{sub.trial_name}</h3>\r\n          <p>Amount: ${sub.amount}</p>\r\n          <p>Status: {sub.status}</p>\r\n          <p>Date: {sub.created_at}</p>\r\n        </div>\r\n      ))}\r\n\r\n      <h2>Address</h2>\r\n      <input\r\n        type=\"text\"\r\n        value={address}\r\n        onChange={(e) => setAddress(e.target.value)}\r\n        placeholder=\"Address\"\r\n      />\r\n      <button onClick={handleUpdateAddress}>Update Address</button>\r\n\r\n      <h2>Payment Methods</h2>\r\n      {paymentMethods.map(method => (\r\n        <div key={method.id}>\r\n          <span>{method.method_type} ending in {method.last_four}</span>\r\n          {method.is_default && <span> (Default)</span>}\r\n          <button onClick={() => handleSetDefault(method.id)}>Make Default</button>\r\n          <button onClick={() => handleDeleteMethod(method.id)}>Remove</button>\r\n        </div>\r\n      ))}\r\n\r\n      <h3>Add Payment Method</h3>\r\n      <select \r\n        value={newMethod.method_type} \r\n        onChange={(e) => setNewMethod({...newMethod, method_type: e.target.value})}\r\n      >\r\n        <option value=\"credit_card\">Credit Card</option>\r\n        <option value=\"paypal\">PayPal</option>\r\n      </select>\r\n      <input\r\n        type=\"text\"\r\n        value={newMethod.last_four}\r\n        onChange={(e) => setNewMethod({...newMethod, last_four: e.target.value})}\r\n        placeholder=\"Last 4 digits\"\r\n        maxLength={4}\r\n      />\r\n      <label>\r\n        <input\r\n          type=\"checkbox\"\r\n          checked={newMethod.is_default}\r\n          onChange={(e) => setNewMethod({...newMethod, is_default: e.target.checked})}\r\n        />\r\n        Set as default\r\n      </label>\r\n      <button onClick={handleAddPaymentMethod}>Add</button>\r\n\r\n      <h2>Invoices</h2>\r\n      {invoices.map(invoice => (\r\n        <div key={invoice.id}>\r\n          <p>Amount: ${invoice.amount}</p>\r\n          <p>Date: {invoice.created_at}</p>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SubscriptionPage;"],"names":["subscriptionsAPI","getPaymentMethods","api","get","data","post","id","delete","getSubscriptions","getInvoices","address","SubscriptionPage","trialId","useParams","navigate","useNavigate","paymentMethods","setPaymentMethods","useState","subscriptions","setSubscriptions","invoices","setInvoices","setAddress","newMethod","setNewMethod","method_type","last_four","is_default","useEffect","loadData","async","methodsRes","subsRes","invoicesRes","error","console","_jsxs","children","_jsx","map","method","onClick","trial_id","parseInt","payment_method_id","methodId","handlePayment","sub","trial_name","amount","status","created_at","type","value","onChange","e","target","placeholder","alert","handleSetDefault","handleDeleteMethod","maxLength","checked","invoice"],"sourceRoot":""}