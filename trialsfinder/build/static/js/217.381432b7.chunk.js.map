{"version":3,"file":"static/js/217.381432b7.chunk.js","mappings":"qMAIO,MAAMA,EAA+BA,KAC1C,MAAOC,EAAQC,IAAaC,EAAAA,EAAAA,UAAkB,KAE9CC,EAAAA,EAAAA,WAAU,KACRC,KACC,IAEH,MAAMA,EAAaC,UACjB,IACE,MAAMC,QAAiBC,EAAAA,EAAUC,YAE3BC,EAAaH,EAASI,KAAKC,SAAWL,EAASI,KACrDT,EAAUW,MAAMC,QAAQJ,GAAcA,EAAa,GACrD,CAAE,MAAOK,GACPC,QAAQD,MAAM,yBAA0BA,GACxCb,EAAU,GACZ,GAqBF,OACEe,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,qBACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,eACHjB,EAAOmB,IAAIC,IACVJ,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,SAAKG,EAAMC,SACXL,EAAAA,EAAAA,MAAA,KAAAC,SAAA,CAAG,WAASG,EAAME,WAClBN,EAAAA,EAAAA,MAAA,KAAAC,SAAA,CAAG,aAAWG,EAAMG,YAAc,MAAQ,QACxB,iBAAjBH,EAAME,SACLJ,EAAAA,EAAAA,KAAA,UAAQM,QAASA,IA5BLnB,WACpB,UACQE,EAAAA,EAAUkB,aAAaC,GAC7BtB,GACF,CAAE,MAAOU,GACPC,QAAQD,MAAM,2BAA4BA,EAC5C,GAsB+Ba,CAAcP,EAAMQ,IAAIX,SAAC,aAElDC,EAAAA,EAAAA,KAAA,UAAQM,QAASA,IArBInB,WAC3B,UACQE,EAAAA,EAAUsB,eAAeH,GAC/BtB,GACF,CAAE,MAAOU,GACPC,QAAQD,MAAM,6BAA8BA,EAC9C,GAe6BgB,CAAqBV,EAAMQ,IAAIX,SACnDG,EAAMG,YAAc,YAAc,cAR7BH,EAAMQ,SAgBxB,G","sources":["pages/AdminDashboardPage.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { trialsAPI } from '../api/trials';\r\nimport { Trial } from '../types';\r\n\r\nexport const AdminDashboardPage: React.FC = () => {\r\n  const [trials, setTrials] = useState<Trial[]>([]);\r\n\r\n  useEffect(() => {\r\n    loadTrials();\r\n  }, []);\r\n\r\n  const loadTrials = async () => {\r\n    try {\r\n      const response = await trialsAPI.adminList();\r\n      // Handle both paginated and non-paginated responses\r\n      const trialsData = response.data.results || response.data;\r\n      setTrials(Array.isArray(trialsData) ? trialsData : []);\r\n    } catch (error) {\r\n      console.error('Failed to load trials:', error);\r\n      setTrials([]);\r\n    }\r\n  };\r\n\r\n  const handleApprove = async (trialId: number) => {\r\n    try {\r\n      await trialsAPI.approveTrial(trialId);\r\n      loadTrials();\r\n    } catch (error) {\r\n      console.error('Failed to approve trial:', error);\r\n    }\r\n  };\r\n\r\n  const handleToggleFeatured = async (trialId: number) => {\r\n    try {\r\n      await trialsAPI.toggleFeatured(trialId);\r\n      loadTrials();\r\n    } catch (error) {\r\n      console.error('Failed to toggle featured:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Admin Dashboard</h1>\r\n      <h2>All Trials</h2>\r\n      {trials.map(trial => (\r\n        <div key={trial.id}>\r\n          <h3>{trial.title}</h3>\r\n          <p>Status: {trial.status}</p>\r\n          <p>Featured: {trial.is_featured ? 'Yes' : 'No'}</p>\r\n          {trial.status === 'under_review' && (\r\n            <button onClick={() => handleApprove(trial.id)}>Approve</button>\r\n          )}\r\n          <button onClick={() => handleToggleFeatured(trial.id)}>\r\n            {trial.is_featured ? 'Unfeature' : 'Feature'}\r\n          </button>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AdminDashboardPage;"],"names":["AdminDashboardPage","trials","setTrials","useState","useEffect","loadTrials","async","response","trialsAPI","adminList","trialsData","data","results","Array","isArray","error","console","_jsxs","children","_jsx","map","trial","title","status","is_featured","onClick","approveTrial","trialId","handleApprove","id","toggleFeatured","handleToggleFeatured"],"sourceRoot":""}