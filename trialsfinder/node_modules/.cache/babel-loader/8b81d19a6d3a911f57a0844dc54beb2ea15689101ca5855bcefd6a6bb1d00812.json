{"ast":null,"code":"import axios from'axios';import{apiCache,setupCacheInterceptor}from'./apiCache';// Use proxy for development, direct path for production\nconst API_BASE_URL=process.env.NODE_ENV==='development'?'/api'// This will use the proxy defined in webpack.config.js\n:'/api';const api=axios.create({baseURL:API_BASE_URL,headers:{common:{'Content-Type':'application/json'}},withCredentials:true,// Important for CSRF\ntimeout:30000// 30 second timeout\n});// Get CSRF token from cookie\nfunction getCookie(name){let cookieValue=null;if(document.cookie&&document.cookie!==''){const cookies=document.cookie.split(';');for(let i=0;i<cookies.length;i++){const cookie=cookies[i].trim();if(cookie.substring(0,name.length+1)===name+'='){cookieValue=decodeURIComponent(cookie.substring(name.length+1));break;}}}return cookieValue;}// Setup cache interceptor\nsetupCacheInterceptor(api);api.interceptors.request.use(config=>{const token=localStorage.getItem('access_token');if(token){config.headers.Authorization=`Bearer ${token}`;}// Add CSRF token for non-GET requests\nif(config.method!=='get'){const csrfToken=getCookie('csrftoken');if(csrfToken){config.headers['X-CSRFToken']=csrfToken;}}// Add security headers\nconfig.headers['X-Requested-With']='XMLHttpRequest';return config;});api.interceptors.response.use(response=>response,async error=>{const originalRequest=error.config;// Handle network errors\nif(!error.response){// Backend is not available\nif(process.env.NODE_ENV==='development'){console.warn('Backend server is not running. Returning mock data.');// Return mock data based on the endpoint\nif(originalRequest.url.includes('/trials')){return{data:{results:[],count:0,next:null,previous:null}};}if(originalRequest.url.includes('/auth/me')){return Promise.reject(new Error('Not authenticated'));}}return Promise.reject(error);}// Handle 401 errors\nif(error.response?.status===401&&!originalRequest._retry){originalRequest._retry=true;try{const refreshToken=localStorage.getItem('refresh_token');if(!refreshToken){throw new Error('No refresh token');}const response=await axios.post(`${API_BASE_URL}/auth/refresh/`,{refresh:refreshToken});localStorage.setItem('access_token',response.data.access);api.defaults.headers.common['Authorization']=`Bearer ${response.data.access}`;return api(originalRequest);}catch(refreshError){// Clear cache on logout\napiCache.invalidate();localStorage.clear();// Only redirect in production\nif(process.env.NODE_ENV==='production'){window.location.href='/login';}}}return Promise.reject(error);});// Cache invalidation helpers\nexport const invalidateUserCache=userId=>{apiCache.invalidateUser(userId);};export const invalidateTrialCache=trialId=>{apiCache.invalidateTrial(trialId);};export default api;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}