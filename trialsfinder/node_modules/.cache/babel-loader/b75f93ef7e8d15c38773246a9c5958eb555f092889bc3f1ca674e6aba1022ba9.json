{"ast":null,"code":"import React from'react';import ReactDOM from'react-dom/client';// Critical CSS only\nimport'./styles/critical.css';// Get root element\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const rootElement=document.getElementById('root');if(!rootElement){throw new Error('Failed to find the root element');}// Create root\nconst root=ReactDOM.createRoot(rootElement);// Fast initial render\nroot.render(/*#__PURE__*/_jsx(\"div\",{style:{minHeight:'100vh',backgroundColor:'#f8f9fa'},children:/*#__PURE__*/_jsxs(\"div\",{style:{textAlign:'center',padding:'2rem'},children:[/*#__PURE__*/_jsx(\"div\",{className:\"spinner\",\"data-size\":\"lg\"}),/*#__PURE__*/_jsx(\"p\",{style:{marginTop:'1rem',color:'#6b7280'},children:\"Loading TrialsFinder...\"})]})}));// Load the app asynchronously\nconst loadApp=async()=>{// Load remaining CSS\nconst{default:App}=await import(/* webpackPreload: true */'./App');await import(/* webpackPreload: true */'./styles/index.css');// Render full app\nroot.render(/*#__PURE__*/_jsx(React.StrictMode,{children:/*#__PURE__*/_jsx(App,{})}));// Register service worker with proper cleanup\nif('serviceWorker'in navigator&&process.env.NODE_ENV==='production'){window.addEventListener('load',()=>{navigator.serviceWorker.register('/service-worker.js').catch(()=>{});});}};// Start loading immediately\nloadApp().catch(console.error);// Clean up event listeners on page unload to allow bfcache\nwindow.addEventListener('pagehide',()=>{// Remove any event listeners that might prevent bfcache\nif('serviceWorker'in navigator){// Don't unregister service worker, just clean up listeners\n}});// Avoid using unload event which prevents bfcache\n// window.addEventListener('unload', ...) - DON'T USE THIS","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}