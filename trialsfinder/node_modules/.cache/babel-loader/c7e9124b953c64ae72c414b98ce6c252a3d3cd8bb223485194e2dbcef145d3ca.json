{"ast":null,"code":"class APICache{constructor(){let options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};this.cache=new Map();this.pendingRequests=new Map();this.maxSize=options.max||500;this.defaultTTL=options.ttl||1000*60*5;// 5 minutes default\n}generateKey(url,params){const sortedParams=params?JSON.stringify(params,Object.keys(params).sort()):'';return`${url}:${sortedParams}`;}isExpired(item){return Date.now()>item.expiry;}evictOldest(){if(this.cache.size>=this.maxSize){const firstKey=this.cache.keys().next().value;if(firstKey){this.cache.delete(firstKey);}}}get(key){const item=this.cache.get(key);if(!item){return undefined;}if(this.isExpired(item)){this.cache.delete(key);return undefined;}return item.data;}set(key,data,ttl){this.evictOldest();const expiry=Date.now()+(ttl||this.defaultTTL);this.cache.set(key,{data,expiry});}async getOrFetch(url,fetcher){let options=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};const key=this.generateKey(url,options.params);// Check cache first\nconst cached=this.get(key);if(cached!==undefined){return cached;}// Check if request is already pending\nconst pending=this.pendingRequests.get(key);if(pending){return pending;}// Make request and cache result\nconst request=fetcher().then(data=>{this.set(key,data,options.ttl);this.pendingRequests.delete(key);return data;}).catch(error=>{this.pendingRequests.delete(key);throw error;});this.pendingRequests.set(key,request);return request;}invalidate(pattern){if(!pattern){this.cache.clear();return;}// Invalidate keys matching pattern\nfor(const key of Array.from(this.cache.keys())){if(key.includes(pattern)){this.cache.delete(key);}}}invalidateUser(userId){this.invalidate(`user:${userId}`);}invalidateTrial(trialId){this.invalidate(`trial:${trialId}`);this.invalidate('trials:');}}export const apiCache=new APICache();// Axios interceptor for automatic caching\nexport const setupCacheInterceptor=axiosInstance=>{// Check if axiosInstance exists and has interceptors\nif(!axiosInstance||!axiosInstance.interceptors){console.warn('Invalid axios instance provided to setupCacheInterceptor');return;}axiosInstance.interceptors.request.use(config=>{// Only cache GET requests\nif(config.method==='get'&&config.cache!==false){const cacheKey=apiCache.generateKey(config.url,config.params);const cached=apiCache.get(cacheKey);if(cached){config.adapter=()=>Promise.resolve({data:cached,status:200,statusText:'OK',headers:{'x-cache':'HIT'},config});}}return config;});axiosInstance.interceptors.response.use(response=>{// Cache successful GET responses\nif(response.config.method==='get'&&response.status===200&&response.config.cache!==false){const cacheKey=apiCache.generateKey(response.config.url,response.config.params);apiCache.set(cacheKey,response.data,response.config.cacheTTL);}return response;});};","map":{"version":3,"names":["APICache","constructor","options","arguments","length","undefined","cache","Map","pendingRequests","maxSize","max","defaultTTL","ttl","generateKey","url","params","sortedParams","JSON","stringify","Object","keys","sort","isExpired","item","Date","now","expiry","evictOldest","size","firstKey","next","value","delete","get","key","data","set","getOrFetch","fetcher","cached","pending","request","then","catch","error","invalidate","pattern","clear","Array","from","includes","invalidateUser","userId","invalidateTrial","trialId","apiCache","setupCacheInterceptor","axiosInstance","interceptors","console","warn","use","config","method","cacheKey","adapter","Promise","resolve","status","statusText","headers","response","cacheTTL"],"sources":["C:/Users/behna/Desktop/trialssfinder/trialsfinder/src/utils/apiCache.ts"],"sourcesContent":["interface CacheOptions {\r\n  ttl?: number;\r\n  max?: number;\r\n}\r\n\r\ninterface CacheItem<T> {\r\n  data: T;\r\n  expiry: number;\r\n}\r\n\r\nclass APICache {\r\n  private cache: Map<string, CacheItem<any>>;\r\n  private pendingRequests: Map<string, Promise<any>>;\r\n  private maxSize: number;\r\n  private defaultTTL: number;\r\n\r\n  constructor(options: CacheOptions = {}) {\r\n    this.cache = new Map();\r\n    this.pendingRequests = new Map();\r\n    this.maxSize = options.max || 500;\r\n    this.defaultTTL = options.ttl || 1000 * 60 * 5; // 5 minutes default\r\n  }\r\n\r\n  generateKey(url: string, params?: any): string {\r\n    const sortedParams = params ? JSON.stringify(params, Object.keys(params).sort()) : '';\r\n    return `${url}:${sortedParams}`;\r\n  }\r\n\r\n  private isExpired(item: CacheItem<any>): boolean {\r\n    return Date.now() > item.expiry;\r\n  }\r\n\r\n  private evictOldest(): void {\r\n    if (this.cache.size >= this.maxSize) {\r\n      const firstKey = this.cache.keys().next().value;\r\n      if (firstKey) {\r\n        this.cache.delete(firstKey);\r\n      }\r\n    }\r\n  }\r\n\r\n  get<T>(key: string): T | undefined {\r\n    const item = this.cache.get(key);\r\n    if (!item) {\r\n      return undefined;\r\n    }\r\n    \r\n    if (this.isExpired(item)) {\r\n      this.cache.delete(key);\r\n      return undefined;\r\n    }\r\n    \r\n    return item.data;\r\n  }\r\n\r\n  set<T>(key: string, data: T, ttl?: number): void {\r\n    this.evictOldest();\r\n    \r\n    const expiry = Date.now() + (ttl || this.defaultTTL);\r\n    this.cache.set(key, { data, expiry });\r\n  }\r\n\r\n  async getOrFetch<T>(\r\n    url: string,\r\n    fetcher: () => Promise<T>,\r\n    options: { ttl?: number; params?: any } = {}\r\n  ): Promise<T> {\r\n    const key = this.generateKey(url, options.params);\r\n    \r\n    // Check cache first\r\n    const cached = this.get<T>(key);\r\n    if (cached !== undefined) {\r\n      return cached;\r\n    }\r\n\r\n    // Check if request is already pending\r\n    const pending = this.pendingRequests.get(key);\r\n    if (pending) {\r\n      return pending;\r\n    }\r\n\r\n    // Make request and cache result\r\n    const request = fetcher()\r\n      .then(data => {\r\n        this.set(key, data, options.ttl);\r\n        this.pendingRequests.delete(key);\r\n        return data;\r\n      })\r\n      .catch(error => {\r\n        this.pendingRequests.delete(key);\r\n        throw error;\r\n      });\r\n\r\n    this.pendingRequests.set(key, request);\r\n    return request;\r\n  }\r\n\r\n  invalidate(pattern?: string): void {\r\n    if (!pattern) {\r\n      this.cache.clear();\r\n      return;\r\n    }\r\n\r\n    // Invalidate keys matching pattern\r\n    for (const key of Array.from(this.cache.keys())) {\r\n      if (key.includes(pattern)) {\r\n        this.cache.delete(key);\r\n      }\r\n    }\r\n  }\r\n\r\n  invalidateUser(userId: number): void {\r\n    this.invalidate(`user:${userId}`);\r\n  }\r\n\r\n  invalidateTrial(trialId: number): void {\r\n    this.invalidate(`trial:${trialId}`);\r\n    this.invalidate('trials:');\r\n  }\r\n}\r\n\r\nexport const apiCache = new APICache();\r\n\r\n// Axios interceptor for automatic caching\r\nexport const setupCacheInterceptor = (axiosInstance: any) => {\r\n  // Check if axiosInstance exists and has interceptors\r\n  if (!axiosInstance || !axiosInstance.interceptors) {\r\n    console.warn('Invalid axios instance provided to setupCacheInterceptor');\r\n    return;\r\n  }\r\n\r\n  axiosInstance.interceptors.request.use((config: any) => {\r\n    // Only cache GET requests\r\n    if (config.method === 'get' && config.cache !== false) {\r\n      const cacheKey = apiCache.generateKey(config.url, config.params);\r\n      const cached = apiCache.get(cacheKey);\r\n      \r\n      if (cached) {\r\n        config.adapter = () => Promise.resolve({\r\n          data: cached,\r\n          status: 200,\r\n          statusText: 'OK',\r\n          headers: { 'x-cache': 'HIT' },\r\n          config,\r\n        });\r\n      }\r\n    }\r\n    return config;\r\n  });\r\n\r\n  axiosInstance.interceptors.response.use((response: any) => {\r\n    // Cache successful GET responses\r\n    if (\r\n      response.config.method === 'get' &&\r\n      response.status === 200 &&\r\n      response.config.cache !== false\r\n    ) {\r\n      const cacheKey = apiCache.generateKey(response.config.url, response.config.params);\r\n      apiCache.set(cacheKey, response.data, response.config.cacheTTL);\r\n    }\r\n    return response;\r\n  });\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}