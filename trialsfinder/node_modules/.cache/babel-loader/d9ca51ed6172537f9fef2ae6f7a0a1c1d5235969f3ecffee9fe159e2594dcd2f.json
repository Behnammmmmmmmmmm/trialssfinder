{"ast":null,"code":"import{authAPI}from'../../api/auth';export const createAuthSlice=set=>({user:null,loading:true,error:null,mockMode:false,setUser:user=>set({user}),setLoading:loading=>set({loading}),setError:error=>set({error}),setMockMode:mockMode=>set({mockMode}),login:async(username,password)=>{set({loading:true,error:null});try{const response=await authAPI.login({username,password});const{tokens,user}=response.data;localStorage.setItem('access_token',tokens.access);localStorage.setItem('refresh_token',tokens.refresh);set({user,loading:false,mockMode:false});}catch(error){// In development, allow mock login\nif(process.env.NODE_ENV==='development'&&error.code==='ERR_NETWORK'){console.warn('Backend not available, using mock login');const mockUser={id:1,username:username,email:`${username}@example.com`,user_type:'user',email_verified:true};set({user:mockUser,loading:false,mockMode:true});localStorage.setItem('mock_user',JSON.stringify(mockUser));}else{set({error:error.message||'Login failed',loading:false});throw error;}}},register:async data=>{set({loading:true,error:null});try{const response=await authAPI.register(data);const{tokens,user}=response.data;localStorage.setItem('access_token',tokens.access);localStorage.setItem('refresh_token',tokens.refresh);if(response.data.verification_token){localStorage.setItem('verification_token',response.data.verification_token);}set({user,loading:false,mockMode:false});}catch(error){// In development, allow mock registration\nif(process.env.NODE_ENV==='development'&&error.code==='ERR_NETWORK'){console.warn('Backend not available, using mock registration');const mockUser={id:Date.now(),username:data.username,email:data.email,user_type:data.user_type,email_verified:false};set({user:mockUser,loading:false,mockMode:true});localStorage.setItem('mock_user',JSON.stringify(mockUser));}else{set({error:error.message||'Registration failed',loading:false});throw error;}}},logout:()=>{localStorage.removeItem('access_token');localStorage.removeItem('refresh_token');localStorage.removeItem('verification_token');localStorage.removeItem('mock_user');set({user:null,loading:false,error:null,mockMode:false});},loadUser:async()=>{const token=localStorage.getItem('access_token');const mockUser=localStorage.getItem('mock_user');// Check for mock user first (development only)\nif(process.env.NODE_ENV==='development'&&mockUser&&!token){try{const user=JSON.parse(mockUser);set({user,loading:false,mockMode:true});return;}catch(e){localStorage.removeItem('mock_user');}}if(!token){set({user:null,loading:false});return;}set({loading:true});try{const response=await authAPI.getMe();const user=response.data;set({user,loading:false,mockMode:false});}catch(error){// In development, check if we have a mock user\nif(process.env.NODE_ENV==='development'&&error.code==='ERR_NETWORK'&&mockUser){try{const user=JSON.parse(mockUser);set({user,loading:false,mockMode:true});return;}catch(e){// Invalid mock user\n}}localStorage.removeItem('access_token');localStorage.removeItem('refresh_token');localStorage.removeItem('mock_user');set({user:null,loading:false});}}});","map":{"version":3,"names":["authAPI","createAuthSlice","set","user","loading","error","mockMode","setUser","setLoading","setError","setMockMode","login","username","password","response","tokens","data","localStorage","setItem","access","refresh","process","env","NODE_ENV","code","console","warn","mockUser","id","email","user_type","email_verified","JSON","stringify","message","register","verification_token","Date","now","logout","removeItem","loadUser","token","getItem","parse","e","getMe"],"sources":["C:/Users/behna/Desktop/trialssfinder/trialsfinder/src/store/slices/authSlice.ts"],"sourcesContent":["import { StateCreator } from 'zustand';\nimport { User } from '../../types';\nimport { authAPI } from '../../api/auth';\nimport { AppState } from '../index';\n\nexport interface AuthState {\n  user: User | null;\n  loading: boolean;\n  error: string | null;\n  mockMode: boolean;\n  setUser: (user: User | null) => void;\n  setLoading: (loading: boolean) => void;\n  setError: (error: string | null) => void;\n  setMockMode: (mockMode: boolean) => void;\n  login: (username: string, password: string) => Promise<void>;\n  register: (data: any) => Promise<void>;\n  logout: () => void;\n  loadUser: () => Promise<void>;\n}\n\nexport const createAuthSlice: StateCreator<AppState, [], [], AuthState> = (set) => ({\n  user: null,\n  loading: true,\n  error: null,\n  mockMode: false,\n  \n  setUser: (user) => set({ user }),\n  setLoading: (loading) => set({ loading }),\n  setError: (error) => set({ error }),\n  setMockMode: (mockMode) => set({ mockMode }),\n  \n  login: async (username, password) => {\n    set({ loading: true, error: null });\n    \n    try {\n      const response = await authAPI.login({ username, password });\n      const { tokens, user } = response.data;\n      \n      localStorage.setItem('access_token', tokens.access);\n      localStorage.setItem('refresh_token', tokens.refresh);\n      \n      set({ user, loading: false, mockMode: false });\n    } catch (error: any) {\n      // In development, allow mock login\n      if (process.env.NODE_ENV === 'development' && error.code === 'ERR_NETWORK') {\n        console.warn('Backend not available, using mock login');\n        const mockUser: User = {\n          id: 1,\n          username: username,\n          email: `${username}@example.com`,\n          user_type: 'user',\n          email_verified: true,\n        };\n        set({ user: mockUser, loading: false, mockMode: true });\n        localStorage.setItem('mock_user', JSON.stringify(mockUser));\n      } else {\n        set({ error: error.message || 'Login failed', loading: false });\n        throw error;\n      }\n    }\n  },\n  \n  register: async (data) => {\n    set({ loading: true, error: null });\n    \n    try {\n      const response = await authAPI.register(data);\n      const { tokens, user } = response.data;\n      \n      localStorage.setItem('access_token', tokens.access);\n      localStorage.setItem('refresh_token', tokens.refresh);\n      \n      if (response.data.verification_token) {\n        localStorage.setItem('verification_token', response.data.verification_token);\n      }\n      \n      set({ user, loading: false, mockMode: false });\n    } catch (error: any) {\n      // In development, allow mock registration\n      if (process.env.NODE_ENV === 'development' && error.code === 'ERR_NETWORK') {\n        console.warn('Backend not available, using mock registration');\n        const mockUser: User = {\n          id: Date.now(),\n          username: data.username,\n          email: data.email,\n          user_type: data.user_type,\n          email_verified: false,\n        };\n        set({ user: mockUser, loading: false, mockMode: true });\n        localStorage.setItem('mock_user', JSON.stringify(mockUser));\n      } else {\n        set({ error: error.message || 'Registration failed', loading: false });\n        throw error;\n      }\n    }\n  },\n  \n  logout: () => {\n    localStorage.removeItem('access_token');\n    localStorage.removeItem('refresh_token');\n    localStorage.removeItem('verification_token');\n    localStorage.removeItem('mock_user');\n    set({ user: null, loading: false, error: null, mockMode: false });\n  },\n  \n  loadUser: async () => {\n    const token = localStorage.getItem('access_token');\n    const mockUser = localStorage.getItem('mock_user');\n    \n    // Check for mock user first (development only)\n    if (process.env.NODE_ENV === 'development' && mockUser && !token) {\n      try {\n        const user = JSON.parse(mockUser);\n        set({ user, loading: false, mockMode: true });\n        return;\n      } catch (e) {\n        localStorage.removeItem('mock_user');\n      }\n    }\n    \n    if (!token) {\n      set({ user: null, loading: false });\n      return;\n    }\n    \n    set({ loading: true });\n    \n    try {\n      const response = await authAPI.getMe();\n      const user = response.data;\n      set({ user, loading: false, mockMode: false });\n    } catch (error: any) {\n      // In development, check if we have a mock user\n      if (process.env.NODE_ENV === 'development' && error.code === 'ERR_NETWORK' && mockUser) {\n        try {\n          const user = JSON.parse(mockUser);\n          set({ user, loading: false, mockMode: true });\n          return;\n        } catch (e) {\n          // Invalid mock user\n        }\n      }\n      \n      localStorage.removeItem('access_token');\n      localStorage.removeItem('refresh_token');\n      localStorage.removeItem('mock_user');\n      set({ user: null, loading: false });\n    }\n  },\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}