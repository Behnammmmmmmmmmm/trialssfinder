{"ast":null,"code":"import { notificationsAPI } from '../../api/notifications';\nexport const createNotificationSlice = (set, get) => ({\n  notifications: [],\n  unreadCount: 0,\n  fetchNotifications: async () => {\n    try {\n      const response = await notificationsAPI.list();\n      const notifications = response.data;\n      const unreadCount = notifications.filter(n => !n.is_read).length;\n      set({\n        notifications,\n        unreadCount\n      });\n    } catch (error) {\n      console.error('Failed to fetch notifications:', error);\n    }\n  },\n  markAsRead: async id => {\n    // Optimistic update\n    const currentNotifications = get().notifications;\n    const currentUnreadCount = get().unreadCount;\n    const updatedNotifications = currentNotifications.map(n => n.id === id ? {\n      ...n,\n      is_read: true\n    } : n);\n    const updatedUnreadCount = Math.max(0, currentUnreadCount - 1);\n    set({\n      notifications: updatedNotifications,\n      unreadCount: updatedUnreadCount\n    });\n    try {\n      await notificationsAPI.markRead(id);\n    } catch (error) {\n      // Revert on error\n      set({\n        notifications: currentNotifications,\n        unreadCount: currentUnreadCount\n      });\n      throw error;\n    }\n  }\n});","map":{"version":3,"names":["notificationsAPI","createNotificationSlice","set","get","notifications","unreadCount","fetchNotifications","response","list","data","filter","n","is_read","length","error","console","markAsRead","id","currentNotifications","currentUnreadCount","updatedNotifications","map","updatedUnreadCount","Math","max","markRead"],"sources":["C:/Users/behna/Desktop/trialssfinder/trialsfinder/src/store/slices/notificationSlice.ts"],"sourcesContent":["import { StateCreator } from 'zustand';\nimport { Notification } from '../../types';\nimport { notificationsAPI } from '../../api/notifications';\nimport { AppState } from '../index';\n\nexport interface NotificationState {\n  notifications: Notification[];\n  unreadCount: number;\n  fetchNotifications: () => Promise<void>;\n  markAsRead: (id: number) => Promise<void>;\n}\n\nexport const createNotificationSlice: StateCreator<AppState, [], [], NotificationState> = (set, get) => ({\n  notifications: [],\n  unreadCount: 0,\n\n  fetchNotifications: async () => {\n    try {\n      const response = await notificationsAPI.list();\n      const notifications = response.data;\n      const unreadCount = notifications.filter((n: Notification) => !n.is_read).length;\n      set({ notifications, unreadCount });\n    } catch (error) {\n      console.error('Failed to fetch notifications:', error);\n    }\n  },\n\n  markAsRead: async (id) => {\n    // Optimistic update\n    const currentNotifications = get().notifications;\n    const currentUnreadCount = get().unreadCount;\n    \n    const updatedNotifications = currentNotifications.map(n => \n      n.id === id ? { ...n, is_read: true } : n\n    );\n    const updatedUnreadCount = Math.max(0, currentUnreadCount - 1);\n    \n    set({ \n      notifications: updatedNotifications,\n      unreadCount: updatedUnreadCount\n    });\n\n    try {\n      await notificationsAPI.markRead(id);\n    } catch (error) {\n      // Revert on error\n      set({ \n        notifications: currentNotifications,\n        unreadCount: currentUnreadCount\n      });\n      throw error;\n    }\n  },\n});"],"mappings":"AAEA,SAASA,gBAAgB,QAAQ,yBAAyB;AAU1D,OAAO,MAAMC,uBAA0E,GAAGA,CAACC,GAAG,EAAEC,GAAG,MAAM;EACvGC,aAAa,EAAE,EAAE;EACjBC,WAAW,EAAE,CAAC;EAEdC,kBAAkB,EAAE,MAAAA,CAAA,KAAY;IAC9B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMP,gBAAgB,CAACQ,IAAI,CAAC,CAAC;MAC9C,MAAMJ,aAAa,GAAGG,QAAQ,CAACE,IAAI;MACnC,MAAMJ,WAAW,GAAGD,aAAa,CAACM,MAAM,CAAEC,CAAe,IAAK,CAACA,CAAC,CAACC,OAAO,CAAC,CAACC,MAAM;MAChFX,GAAG,CAAC;QAAEE,aAAa;QAAEC;MAAY,CAAC,CAAC;IACrC,CAAC,CAAC,OAAOS,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IACxD;EACF,CAAC;EAEDE,UAAU,EAAE,MAAOC,EAAE,IAAK;IACxB;IACA,MAAMC,oBAAoB,GAAGf,GAAG,CAAC,CAAC,CAACC,aAAa;IAChD,MAAMe,kBAAkB,GAAGhB,GAAG,CAAC,CAAC,CAACE,WAAW;IAE5C,MAAMe,oBAAoB,GAAGF,oBAAoB,CAACG,GAAG,CAACV,CAAC,IACrDA,CAAC,CAACM,EAAE,KAAKA,EAAE,GAAG;MAAE,GAAGN,CAAC;MAAEC,OAAO,EAAE;IAAK,CAAC,GAAGD,CAC1C,CAAC;IACD,MAAMW,kBAAkB,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEL,kBAAkB,GAAG,CAAC,CAAC;IAE9DjB,GAAG,CAAC;MACFE,aAAa,EAAEgB,oBAAoB;MACnCf,WAAW,EAAEiB;IACf,CAAC,CAAC;IAEF,IAAI;MACF,MAAMtB,gBAAgB,CAACyB,QAAQ,CAACR,EAAE,CAAC;IACrC,CAAC,CAAC,OAAOH,KAAK,EAAE;MACd;MACAZ,GAAG,CAAC;QACFE,aAAa,EAAEc,oBAAoB;QACnCb,WAAW,EAAEc;MACf,CAAC,CAAC;MACF,MAAML,KAAK;IACb;EACF;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}