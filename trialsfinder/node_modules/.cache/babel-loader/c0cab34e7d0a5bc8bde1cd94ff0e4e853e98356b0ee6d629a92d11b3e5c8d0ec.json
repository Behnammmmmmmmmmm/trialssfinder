{"ast":null,"code":"import { create } from 'zustand';\nimport { devtools, persist, subscribeWithSelector } from 'zustand/middleware';\nimport { immer } from 'zustand/middleware/immer';\nimport { createAuthSlice } from './slices/authSlice';\nimport { createNotificationSlice } from './slices/notificationSlice';\nimport { createTrialsSlice } from './slices/trialsSlice';\nimport { createUISlice } from './slices/uiSlice';\nexport const useStore = create()(devtools(persist(subscribeWithSelector(immer((set, get, api) => ({\n  ...createAuthSlice(set, get, api),\n  ...createTrialsSlice(set, get, api),\n  ...createUISlice(set, get, api),\n  ...createNotificationSlice(set, get, api),\n  clearLoadingStates: () => set(state => {\n    state.loadingStates = {};\n  })\n}))), {\n  name: 'trialssfinder-store',\n  partialize: state => ({\n    user: state.user,\n    favoriteTrials: state.favoriteTrials,\n    selectedIndustries: state.selectedIndustries\n  })\n}), {\n  name: 'TrialsFinder'\n}));","map":{"version":3,"names":["create","devtools","persist","subscribeWithSelector","immer","createAuthSlice","createNotificationSlice","createTrialsSlice","createUISlice","useStore","set","get","api","clearLoadingStates","state","loadingStates","name","partialize","user","favoriteTrials","selectedIndustries"],"sources":["C:/Users/behna/Desktop/trialssfinder/trialsfinder/src/store/index.ts"],"sourcesContent":["import { create } from 'zustand';\nimport { devtools, persist, subscribeWithSelector } from 'zustand/middleware';\nimport { immer } from 'zustand/middleware/immer';\n\nimport { AuthState, createAuthSlice } from './slices/authSlice';\nimport { NotificationState, createNotificationSlice } from './slices/notificationSlice';\nimport { TrialsState, createTrialsSlice } from './slices/trialsSlice';\nimport { UIState, createUISlice } from './slices/uiSlice';\n\nexport interface AppState extends AuthState, TrialsState, UIState, NotificationState {\n  clearLoadingStates: () => void;\n}\n\nexport const useStore = create<AppState>()(\n  devtools(\n    persist(\n      subscribeWithSelector(\n        immer((set, get, api) => ({\n          ...createAuthSlice(set, get, api),\n          ...createTrialsSlice(set, get, api),\n          ...createUISlice(set, get, api),\n          ...createNotificationSlice(set, get, api),\n          clearLoadingStates: () => set((state) => {\n            state.loadingStates = {};\n          }),\n        }))\n      ),\n      {\n        name: 'trialssfinder-store',\n        partialize: (state) => ({\n          user: state.user,\n          favoriteTrials: state.favoriteTrials,\n          selectedIndustries: state.selectedIndustries,\n        }),\n      }\n    ),\n    { name: 'TrialsFinder' }\n  )\n);"],"mappings":"AAAA,SAASA,MAAM,QAAQ,SAAS;AAChC,SAASC,QAAQ,EAAEC,OAAO,EAAEC,qBAAqB,QAAQ,oBAAoB;AAC7E,SAASC,KAAK,QAAQ,0BAA0B;AAEhD,SAAoBC,eAAe,QAAQ,oBAAoB;AAC/D,SAA4BC,uBAAuB,QAAQ,4BAA4B;AACvF,SAAsBC,iBAAiB,QAAQ,sBAAsB;AACrE,SAAkBC,aAAa,QAAQ,kBAAkB;AAMzD,OAAO,MAAMC,QAAQ,GAAGT,MAAM,CAAW,CAAC,CACxCC,QAAQ,CACNC,OAAO,CACLC,qBAAqB,CACnBC,KAAK,CAAC,CAACM,GAAG,EAAEC,GAAG,EAAEC,GAAG,MAAM;EACxB,GAAGP,eAAe,CAACK,GAAG,EAAEC,GAAG,EAAEC,GAAG,CAAC;EACjC,GAAGL,iBAAiB,CAACG,GAAG,EAAEC,GAAG,EAAEC,GAAG,CAAC;EACnC,GAAGJ,aAAa,CAACE,GAAG,EAAEC,GAAG,EAAEC,GAAG,CAAC;EAC/B,GAAGN,uBAAuB,CAACI,GAAG,EAAEC,GAAG,EAAEC,GAAG,CAAC;EACzCC,kBAAkB,EAAEA,CAAA,KAAMH,GAAG,CAAEI,KAAK,IAAK;IACvCA,KAAK,CAACC,aAAa,GAAG,CAAC,CAAC;EAC1B,CAAC;AACH,CAAC,CAAC,CACJ,CAAC,EACD;EACEC,IAAI,EAAE,qBAAqB;EAC3BC,UAAU,EAAGH,KAAK,KAAM;IACtBI,IAAI,EAAEJ,KAAK,CAACI,IAAI;IAChBC,cAAc,EAAEL,KAAK,CAACK,cAAc;IACpCC,kBAAkB,EAAEN,KAAK,CAACM;EAC5B,CAAC;AACH,CACF,CAAC,EACD;EAAEJ,IAAI,EAAE;AAAe,CACzB,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}