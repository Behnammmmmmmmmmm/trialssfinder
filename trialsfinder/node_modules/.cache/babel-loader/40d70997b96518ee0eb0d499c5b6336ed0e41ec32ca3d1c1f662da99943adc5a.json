{"ast":null,"code":"import React,{createContext,useContext,useReducer}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";const initialState={user:null,trials:[],notifications:[],loading:{},errors:{}};function appReducer(state,action){switch(action.type){case'SET_USER':return{...state,user:action.payload};case'SET_TRIALS':return{...state,trials:action.payload};case'ADD_TRIAL':return{...state,trials:[...state.trials,action.payload]};case'UPDATE_TRIAL':return{...state,trials:state.trials.map(trial=>trial.id===action.payload.id?{...trial,...action.payload.trial}:trial)};case'SET_NOTIFICATIONS':return{...state,notifications:action.payload};case'MARK_NOTIFICATION_READ':return{...state,notifications:state.notifications.map(notif=>notif.id===action.payload?{...notif,is_read:true}:notif)};case'SET_LOADING':return{...state,loading:{...state.loading,[action.payload.key]:action.payload.value}};case'SET_ERROR':return{...state,errors:action.payload.error?{...state.errors,[action.payload.key]:action.payload.error}:Object.fromEntries(Object.entries(state.errors).filter(_ref=>{let[key]=_ref;return key!==action.payload.key;}))};case'CLEAR_ERRORS':return{...state,errors:{}};default:return state;}}const AppContext=/*#__PURE__*/createContext(null);export const AppProvider=_ref2=>{let{children}=_ref2;const[state,dispatch]=useReducer(appReducer,initialState);return/*#__PURE__*/_jsx(AppContext.Provider,{value:{state,dispatch},children:children});};export function useAppContext(){const context=useContext(AppContext);if(!context){throw new Error('useAppContext must be used within AppProvider');}return context;}// Selector hooks\nexport function useUser(){const{state}=useAppContext();return state.user;}export function useTrials(){const{state,dispatch}=useAppContext();return{trials:state.trials,setTrials:trials=>dispatch({type:'SET_TRIALS',payload:trials}),addTrial:trial=>dispatch({type:'ADD_TRIAL',payload:trial}),updateTrial:(id,trial)=>dispatch({type:'UPDATE_TRIAL',payload:{id,trial}})};}export function useLoading(key){const{state,dispatch}=useAppContext();return{isLoading:state.loading[key]||false,setLoading:value=>dispatch({type:'SET_LOADING',payload:{key,value}})};}export function useError(key){const{state,dispatch}=useAppContext();return{error:state.errors[key]||null,setError:error=>dispatch({type:'SET_ERROR',payload:{key,error}})};}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}