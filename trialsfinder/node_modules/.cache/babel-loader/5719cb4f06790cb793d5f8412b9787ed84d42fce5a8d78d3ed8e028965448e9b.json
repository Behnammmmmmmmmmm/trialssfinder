{"ast":null,"code":"import{authAPI}from'../../api/auth';export const createAuthSlice=set=>({user:null,loading:true,error:null,mockMode:false,setUser:user=>set({user}),setLoading:loading=>set({loading}),setError:error=>set({error}),setMockMode:mockMode=>set({mockMode}),login:async(username,password)=>{set({loading:true,error:null});try{const response=await authAPI.login({username,password});const{tokens,user}=response.data;localStorage.setItem('access_token',tokens.access);localStorage.setItem('refresh_token',tokens.refresh);set({user,loading:false,mockMode:false});}catch(error){// In development, allow mock login\nif(process.env.NODE_ENV==='development'&&error.code==='ERR_NETWORK'){console.warn('Backend not available, using mock login');const mockUser={id:1,username:username,email:`${username}@example.com`,user_type:'user',email_verified:true};set({user:mockUser,loading:false,mockMode:true});localStorage.setItem('mock_user',JSON.stringify(mockUser));}else{set({error:error.message||'Login failed',loading:false});throw error;}}},register:async data=>{set({loading:true,error:null});try{const response=await authAPI.register(data);const{tokens,user}=response.data;localStorage.setItem('access_token',tokens.access);localStorage.setItem('refresh_token',tokens.refresh);if(response.data.verification_token){localStorage.setItem('verification_token',response.data.verification_token);}set({user,loading:false,mockMode:false});}catch(error){// In development, allow mock registration\nif(process.env.NODE_ENV==='development'&&error.code==='ERR_NETWORK'){console.warn('Backend not available, using mock registration');const mockUser={id:Date.now(),username:data.username,email:data.email,user_type:data.user_type||'user',email_verified:false};set({user:mockUser,loading:false,mockMode:true});localStorage.setItem('mock_user',JSON.stringify(mockUser));}else{set({error:error.message||'Registration failed',loading:false});throw error;}}},logout:()=>{localStorage.removeItem('access_token');localStorage.removeItem('refresh_token');localStorage.removeItem('verification_token');localStorage.removeItem('mock_user');set({user:null,loading:false,error:null,mockMode:false});},loadUser:async()=>{const token=localStorage.getItem('access_token');const mockUser=localStorage.getItem('mock_user');// Check for mock user first (development only)\nif(process.env.NODE_ENV==='development'&&mockUser&&!token){try{const user=JSON.parse(mockUser);set({user,loading:false,mockMode:true});return;}catch(e){localStorage.removeItem('mock_user');}}if(!token){set({user:null,loading:false});return;}set({loading:true});try{const response=await authAPI.getMe();set({user:response.data,loading:false,mockMode:false});}catch(error){// In development, check if we have a mock user\nif(process.env.NODE_ENV==='development'&&error.code==='ERR_NETWORK'&&mockUser){try{const user=JSON.parse(mockUser);set({user,loading:false,mockMode:true});return;}catch(e){// Invalid mock user\n}}localStorage.removeItem('access_token');localStorage.removeItem('refresh_token');localStorage.removeItem('mock_user');set({user:null,loading:false});}}});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}