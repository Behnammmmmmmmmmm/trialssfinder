{"ast":null,"code":"import{trialsAPI}from'../../api/trials';export const createTrialsSlice=(set,get)=>({trials:[],favoriteTrials:[],selectedIndustries:[],industries:[],loadingTrials:false,toggleFavorite:async trialId=>{const{favoriteTrials,trials}=get();const isFavorited=favoriteTrials.includes(trialId);// Optimistic update\nconst updatedFavorites=isFavorited?favoriteTrials.filter(id=>id!==trialId):[...favoriteTrials,trialId];const updatedTrials=trials.map(t=>t.id===trialId?{...t,is_favorited:!isFavorited}:t);set({favoriteTrials:updatedFavorites,trials:updatedTrials});try{await trialsAPI.toggleFavorite(trialId);}catch(error){// Revert on error\nset({favoriteTrials:favoriteTrials,trials:trials});throw error;}},loadFavorites:async()=>{try{const response=await trialsAPI.getFavorites();const favoriteIds=response.data.map(fav=>fav.trial.id);set({favoriteTrials:favoriteIds});}catch(error){// Only log in non-test environments\nif(process.env.NODE_ENV!=='test'){console.error('Failed to load favorites:',error);}}},updateIndustries:async industries=>{set({selectedIndustries:industries});try{await trialsAPI.followIndustries(industries);}catch(error){throw error;}},fetchTrials:async params=>{set({loadingTrials:true});try{const response=await trialsAPI.list(params);// Handle paginated response\nconst trialsData=response.data.results||response.data;// Ensure we always have an array\nconst trials=Array.isArray(trialsData)?trialsData:[];set({trials,loadingTrials:false});}catch(error){set({trials:[],loadingTrials:false});// Only log in non-test environments\nif(process.env.NODE_ENV!=='test'){console.error('Failed to fetch trials:',error);}}},fetchIndustries:async()=>{try{const response=await trialsAPI.getIndustries();set({industries:response.data});}catch(error){// Only log in non-test environments\nif(process.env.NODE_ENV!=='test'){console.error('Failed to load industries:',error);}}}});","map":{"version":3,"names":["trialsAPI","createTrialsSlice","set","get","trials","favoriteTrials","selectedIndustries","industries","loadingTrials","toggleFavorite","trialId","isFavorited","includes","updatedFavorites","filter","id","updatedTrials","map","t","is_favorited","error","loadFavorites","response","getFavorites","favoriteIds","data","fav","trial","process","env","NODE_ENV","console","updateIndustries","followIndustries","fetchTrials","params","list","trialsData","results","Array","isArray","fetchIndustries","getIndustries"],"sources":["C:/Users/behna/Desktop/trialssfinder/trialsfinder/src/store/slices/trialsSlice.ts"],"sourcesContent":["import { StateCreator } from 'zustand';\nimport { Trial, Industry } from '../../types';\nimport { trialsAPI } from '../../api/trials';\nimport { AppState } from '../index';\n\nexport interface TrialsState {\n  trials: Trial[];\n  favoriteTrials: number[];\n  selectedIndustries: number[];\n  industries: Industry[];\n  loadingTrials: boolean;\n  toggleFavorite: (trialId: number) => Promise<void>;\n  loadFavorites: () => Promise<void>;\n  updateIndustries: (industries: number[]) => Promise<void>;\n  fetchTrials: (params?: any) => Promise<void>;\n  fetchIndustries: () => Promise<void>;\n}\n\nexport const createTrialsSlice: StateCreator<AppState, [], [], TrialsState> = (set, get) => ({\n  trials: [],\n  favoriteTrials: [],\n  selectedIndustries: [],\n  industries: [],\n  loadingTrials: false,\n\n  toggleFavorite: async (trialId) => {\n    const { favoriteTrials, trials } = get();\n    const isFavorited = favoriteTrials.includes(trialId);\n    \n    // Optimistic update\n    const updatedFavorites = isFavorited \n      ? favoriteTrials.filter(id => id !== trialId)\n      : [...favoriteTrials, trialId];\n      \n    const updatedTrials = trials.map(t => \n      t.id === trialId ? { ...t, is_favorited: !isFavorited } : t\n    );\n    \n    set({\n      favoriteTrials: updatedFavorites,\n      trials: updatedTrials\n    });\n\n    try {\n      await trialsAPI.toggleFavorite(trialId);\n    } catch (error) {\n      // Revert on error\n      set({\n        favoriteTrials: favoriteTrials,\n        trials: trials\n      });\n      throw error;\n    }\n  },\n\n  loadFavorites: async () => {\n    try {\n      const response = await trialsAPI.getFavorites();\n      const favoriteIds = response.data.map((fav: any) => fav.trial.id);\n      set({ favoriteTrials: favoriteIds });\n    } catch (error) {\n      // Only log in non-test environments\n      if (process.env.NODE_ENV !== 'test') {\n        console.error('Failed to load favorites:', error);\n      }\n    }\n  },\n\n  updateIndustries: async (industries) => {\n    set({ selectedIndustries: industries });\n    try {\n      await trialsAPI.followIndustries(industries);\n    } catch (error) {\n      throw error;\n    }\n  },\n\n  fetchTrials: async (params) => {\n    set({ loadingTrials: true });\n    try {\n      const response = await trialsAPI.list(params);\n      // Handle paginated response\n      const trialsData = response.data.results || response.data;\n      // Ensure we always have an array\n      const trials = Array.isArray(trialsData) ? trialsData : [];\n      set({ trials, loadingTrials: false });\n    } catch (error) {\n      set({ trials: [], loadingTrials: false });\n      // Only log in non-test environments\n      if (process.env.NODE_ENV !== 'test') {\n        console.error('Failed to fetch trials:', error);\n      }\n    }\n  },\n\n  fetchIndustries: async () => {\n    try {\n      const response = await trialsAPI.getIndustries();\n      set({ industries: response.data });\n    } catch (error) {\n      // Only log in non-test environments\n      if (process.env.NODE_ENV !== 'test') {\n        console.error('Failed to load industries:', error);\n      }\n    }\n  },\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}