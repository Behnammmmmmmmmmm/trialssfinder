{"ast":null,"code":"import { authAPI } from '../../api/auth';\nexport const createAuthSlice = set => ({\n  user: null,\n  loading: true,\n  error: null,\n  mockMode: false,\n  setUser: user => set({\n    user\n  }),\n  setLoading: loading => set({\n    loading\n  }),\n  setError: error => set({\n    error\n  }),\n  setMockMode: mockMode => set({\n    mockMode\n  }),\n  login: async (email, password) => {\n    set({\n      loading: true,\n      error: null\n    });\n    try {\n      const response = await authAPI.login({\n        email,\n        password\n      });\n      const {\n        tokens,\n        user\n      } = response.data;\n      localStorage.setItem('access_token', tokens.access);\n      localStorage.setItem('refresh_token', tokens.refresh);\n      set({\n        user,\n        loading: false,\n        mockMode: false\n      });\n    } catch (error) {\n      // In development, allow mock login\n      if (process.env.NODE_ENV === 'development' && error.code === 'ERR_NETWORK') {\n        console.warn('Backend not available, using mock login');\n        const mockUser = {\n          id: 1,\n          username: email.split('@')[0],\n          email: email,\n          user_type: 'user',\n          email_verified: true\n        };\n        set({\n          user: mockUser,\n          loading: false,\n          mockMode: true\n        });\n        localStorage.setItem('mock_user', JSON.stringify(mockUser));\n      } else {\n        set({\n          error: error.message || 'Login failed',\n          loading: false\n        });\n        throw error;\n      }\n    }\n  },\n  register: async data => {\n    set({\n      loading: true,\n      error: null\n    });\n    try {\n      const response = await authAPI.register(data);\n      const {\n        tokens,\n        user\n      } = response.data;\n      localStorage.setItem('access_token', tokens.access);\n      localStorage.setItem('refresh_token', tokens.refresh);\n      if (response.data.verification_token) {\n        localStorage.setItem('verification_token', response.data.verification_token);\n      }\n      set({\n        user,\n        loading: false,\n        mockMode: false\n      });\n    } catch (error) {\n      // In development, allow mock registration\n      if (process.env.NODE_ENV === 'development' && error.code === 'ERR_NETWORK') {\n        console.warn('Backend not available, using mock registration');\n        const mockUser = {\n          id: Date.now(),\n          username: data.email.split('@')[0],\n          email: data.email,\n          user_type: data.user_type,\n          email_verified: false\n        };\n        set({\n          user: mockUser,\n          loading: false,\n          mockMode: true\n        });\n        localStorage.setItem('mock_user', JSON.stringify(mockUser));\n      } else {\n        set({\n          error: error.message || 'Registration failed',\n          loading: false\n        });\n        throw error;\n      }\n    }\n  },\n  logout: () => {\n    localStorage.removeItem('access_token');\n    localStorage.removeItem('refresh_token');\n    localStorage.removeItem('verification_token');\n    localStorage.removeItem('mock_user');\n    set({\n      user: null,\n      loading: false,\n      error: null,\n      mockMode: false\n    });\n  },\n  loadUser: async () => {\n    const token = localStorage.getItem('access_token');\n    const mockUser = localStorage.getItem('mock_user');\n\n    // Check for mock user first (development only)\n    if (process.env.NODE_ENV === 'development' && mockUser && !token) {\n      try {\n        const user = JSON.parse(mockUser);\n        set({\n          user,\n          loading: false,\n          mockMode: true\n        });\n        return;\n      } catch (e) {\n        localStorage.removeItem('mock_user');\n      }\n    }\n    if (!token) {\n      set({\n        user: null,\n        loading: false\n      });\n      return;\n    }\n    set({\n      loading: true\n    });\n    try {\n      const response = await authAPI.getMe();\n      const user = response.data;\n      set({\n        user,\n        loading: false,\n        mockMode: false\n      });\n    } catch (error) {\n      // In development, check if we have a mock user\n      if (process.env.NODE_ENV === 'development' && error.code === 'ERR_NETWORK' && mockUser) {\n        try {\n          const user = JSON.parse(mockUser);\n          set({\n            user,\n            loading: false,\n            mockMode: true\n          });\n          return;\n        } catch (e) {\n          // Invalid mock user\n        }\n      }\n      localStorage.removeItem('access_token');\n      localStorage.removeItem('refresh_token');\n      localStorage.removeItem('mock_user');\n      set({\n        user: null,\n        loading: false\n      });\n    }\n  }\n});","map":{"version":3,"names":["authAPI","createAuthSlice","set","user","loading","error","mockMode","setUser","setLoading","setError","setMockMode","login","email","password","response","tokens","data","localStorage","setItem","access","refresh","process","env","NODE_ENV","code","console","warn","mockUser","id","username","split","user_type","email_verified","JSON","stringify","message","register","verification_token","Date","now","logout","removeItem","loadUser","token","getItem","parse","e","getMe"],"sources":["C:/Users/behna/Desktop/trialssfinder/trialsfinder/src/store/slices/authSlice.ts"],"sourcesContent":["import { StateCreator } from 'zustand';\nimport { User } from '../../types';\nimport { authAPI } from '../../api/auth';\nimport { AppState } from '../index';\n\nexport interface AuthState {\n  user: User | null;\n  loading: boolean;\n  error: string | null;\n  mockMode: boolean;\n  setUser: (user: User | null) => void;\n  setLoading: (loading: boolean) => void;\n  setError: (error: string | null) => void;\n  setMockMode: (mockMode: boolean) => void;\n  login: (email: string, password: string) => Promise<void>;\n  register: (data: any) => Promise<void>;\n  logout: () => void;\n  loadUser: () => Promise<void>;\n}\n\nexport const createAuthSlice: StateCreator<AppState, [], [], AuthState> = (set) => ({\n  user: null,\n  loading: true,\n  error: null,\n  mockMode: false,\n  \n  setUser: (user) => set({ user }),\n  setLoading: (loading) => set({ loading }),\n  setError: (error) => set({ error }),\n  setMockMode: (mockMode) => set({ mockMode }),\n  \n  login: async (email, password) => {\n    set({ loading: true, error: null });\n    try {\n      const response = await authAPI.login({ email, password });\n      const { tokens, user } = response.data;\n      \n      localStorage.setItem('access_token', tokens.access);\n      localStorage.setItem('refresh_token', tokens.refresh);\n      set({ user, loading: false, mockMode: false });\n    } catch (error: any) {\n      // In development, allow mock login\n      if (process.env.NODE_ENV === 'development' && error.code === 'ERR_NETWORK') {\n        console.warn('Backend not available, using mock login');\n        const mockUser: User = {\n          id: 1,\n          username: email.split('@')[0],\n          email: email,\n          user_type: 'user',\n          email_verified: true,\n        };\n        set({ user: mockUser, loading: false, mockMode: true });\n        localStorage.setItem('mock_user', JSON.stringify(mockUser));\n      } else {\n        set({ error: error.message || 'Login failed', loading: false });\n        throw error;\n      }\n    }\n  },\n  \n  register: async (data) => {\n    set({ loading: true, error: null });\n    try {\n      const response = await authAPI.register(data);\n      const { tokens, user } = response.data;\n      \n      localStorage.setItem('access_token', tokens.access);\n      localStorage.setItem('refresh_token', tokens.refresh);\n      if (response.data.verification_token) {\n        localStorage.setItem('verification_token', response.data.verification_token);\n      }\n      set({ user, loading: false, mockMode: false });\n    } catch (error: any) {\n      // In development, allow mock registration\n      if (process.env.NODE_ENV === 'development' && error.code === 'ERR_NETWORK') {\n        console.warn('Backend not available, using mock registration');\n        const mockUser: User = {\n          id: Date.now(),\n          username: data.email.split('@')[0],\n          email: data.email,\n          user_type: data.user_type,\n          email_verified: false,\n        };\n        set({ user: mockUser, loading: false, mockMode: true });\n        localStorage.setItem('mock_user', JSON.stringify(mockUser));\n      } else {\n        set({ error: error.message || 'Registration failed', loading: false });\n        throw error;\n      }\n    }\n  },\n  \n  logout: () => {\n    localStorage.removeItem('access_token');\n    localStorage.removeItem('refresh_token');\n    localStorage.removeItem('verification_token');\n    localStorage.removeItem('mock_user');\n    set({ user: null, loading: false, error: null, mockMode: false });\n  },\n  \n  loadUser: async () => {\n    const token = localStorage.getItem('access_token');\n    const mockUser = localStorage.getItem('mock_user');\n    \n    // Check for mock user first (development only)\n    if (process.env.NODE_ENV === 'development' && mockUser && !token) {\n      try {\n        const user = JSON.parse(mockUser);\n        set({ user, loading: false, mockMode: true });\n        return;\n      } catch (e) {\n        localStorage.removeItem('mock_user');\n      }\n    }\n    \n    if (!token) {\n      set({ user: null, loading: false });\n      return;\n    }\n    \n    set({ loading: true });\n    try {\n      const response = await authAPI.getMe();\n      const user = response.data;\n      set({ user, loading: false, mockMode: false });\n    } catch (error: any) {\n      // In development, check if we have a mock user\n      if (process.env.NODE_ENV === 'development' && error.code === 'ERR_NETWORK' && mockUser) {\n        try {\n          const user = JSON.parse(mockUser);\n          set({ user, loading: false, mockMode: true });\n          return;\n        } catch (e) {\n          // Invalid mock user\n        }\n      }\n      \n      localStorage.removeItem('access_token');\n      localStorage.removeItem('refresh_token');\n      localStorage.removeItem('mock_user');\n      set({ user: null, loading: false });\n    }\n  },\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}