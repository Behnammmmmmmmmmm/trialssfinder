{"ast":null,"code":"import { trialsAPI } from '../../api/trials';\nexport const createTrialsSlice = (set, get) => ({\n  trials: [],\n  favoriteTrials: [],\n  selectedIndustries: [],\n  industries: [],\n  loadingTrials: false,\n  toggleFavorite: async trialId => {\n    const {\n      favoriteTrials,\n      trials\n    } = get();\n    const isFavorited = favoriteTrials.includes(trialId);\n\n    // Optimistic update\n    const updatedFavorites = isFavorited ? favoriteTrials.filter(id => id !== trialId) : [...favoriteTrials, trialId];\n    const updatedTrials = trials.map(t => t.id === trialId ? {\n      ...t,\n      is_favorited: !isFavorited\n    } : t);\n    set({\n      favoriteTrials: updatedFavorites,\n      trials: updatedTrials\n    });\n    try {\n      await trialsAPI.toggleFavorite(trialId);\n    } catch (error) {\n      // Revert on error\n      set({\n        favoriteTrials: favoriteTrials,\n        trials: trials\n      });\n      throw error;\n    }\n  },\n  loadFavorites: async () => {\n    try {\n      const response = await trialsAPI.getFavorites();\n      const favoriteIds = response.data.map(fav => fav.trial.id);\n      set({\n        favoriteTrials: favoriteIds\n      });\n    } catch (error) {\n      // Only log in non-test environments\n      if (process.env.NODE_ENV !== 'test') {\n        console.error('Failed to load favorites:', error);\n      }\n    }\n  },\n  updateIndustries: async industries => {\n    set({\n      selectedIndustries: industries\n    });\n    try {\n      await trialsAPI.followIndustries(industries);\n    } catch (error) {\n      throw error;\n    }\n  },\n  fetchTrials: async params => {\n    set({\n      loadingTrials: true\n    });\n    try {\n      const response = await trialsAPI.list(params);\n      // Handle paginated response\n      const trialsData = response.data.results || response.data;\n      // Ensure we always have an array\n      const trials = Array.isArray(trialsData) ? trialsData : [];\n      set({\n        trials,\n        loadingTrials: false\n      });\n    } catch (error) {\n      set({\n        trials: [],\n        loadingTrials: false\n      });\n      // Only log in non-test environments\n      if (process.env.NODE_ENV !== 'test') {\n        console.error('Failed to fetch trials:', error);\n      }\n    }\n  },\n  fetchIndustries: async () => {\n    try {\n      const response = await trialsAPI.getIndustries();\n      set({\n        industries: response.data\n      });\n    } catch (error) {\n      // Only log in non-test environments\n      if (process.env.NODE_ENV !== 'test') {\n        console.error('Failed to load industries:', error);\n      }\n    }\n  }\n});","map":{"version":3,"names":["trialsAPI","createTrialsSlice","set","get","trials","favoriteTrials","selectedIndustries","industries","loadingTrials","toggleFavorite","trialId","isFavorited","includes","updatedFavorites","filter","id","updatedTrials","map","t","is_favorited","error","loadFavorites","response","getFavorites","favoriteIds","data","fav","trial","process","env","NODE_ENV","console","updateIndustries","followIndustries","fetchTrials","params","list","trialsData","results","Array","isArray","fetchIndustries","getIndustries"],"sources":["C:/Users/behna/Desktop/trialssfinder/trialsfinder/src/store/slices/trialsSlice.ts"],"sourcesContent":["import { StateCreator } from 'zustand';\nimport { Trial, Industry } from '../../types';\nimport { trialsAPI } from '../../api/trials';\nimport { AppState } from '../index';\n\nexport interface TrialsState {\n  trials: Trial[];\n  favoriteTrials: number[];\n  selectedIndustries: number[];\n  industries: Industry[];\n  loadingTrials: boolean;\n  toggleFavorite: (trialId: number) => Promise<void>;\n  loadFavorites: () => Promise<void>;\n  updateIndustries: (industries: number[]) => Promise<void>;\n  fetchTrials: (params?: any) => Promise<void>;\n  fetchIndustries: () => Promise<void>;\n}\n\nexport const createTrialsSlice: StateCreator<AppState, [], [], TrialsState> = (set, get) => ({\n  trials: [],\n  favoriteTrials: [],\n  selectedIndustries: [],\n  industries: [],\n  loadingTrials: false,\n\n  toggleFavorite: async (trialId) => {\n    const { favoriteTrials, trials } = get();\n    const isFavorited = favoriteTrials.includes(trialId);\n    \n    // Optimistic update\n    const updatedFavorites = isFavorited \n      ? favoriteTrials.filter(id => id !== trialId)\n      : [...favoriteTrials, trialId];\n      \n    const updatedTrials = trials.map(t => \n      t.id === trialId ? { ...t, is_favorited: !isFavorited } : t\n    );\n    \n    set({\n      favoriteTrials: updatedFavorites,\n      trials: updatedTrials\n    });\n\n    try {\n      await trialsAPI.toggleFavorite(trialId);\n    } catch (error) {\n      // Revert on error\n      set({\n        favoriteTrials: favoriteTrials,\n        trials: trials\n      });\n      throw error;\n    }\n  },\n\n  loadFavorites: async () => {\n    try {\n      const response = await trialsAPI.getFavorites();\n      const favoriteIds = response.data.map((fav: any) => fav.trial.id);\n      set({ favoriteTrials: favoriteIds });\n    } catch (error) {\n      // Only log in non-test environments\n      if (process.env.NODE_ENV !== 'test') {\n        console.error('Failed to load favorites:', error);\n      }\n    }\n  },\n\n  updateIndustries: async (industries) => {\n    set({ selectedIndustries: industries });\n    try {\n      await trialsAPI.followIndustries(industries);\n    } catch (error) {\n      throw error;\n    }\n  },\n\n  fetchTrials: async (params) => {\n    set({ loadingTrials: true });\n    try {\n      const response = await trialsAPI.list(params);\n      // Handle paginated response\n      const trialsData = response.data.results || response.data;\n      // Ensure we always have an array\n      const trials = Array.isArray(trialsData) ? trialsData : [];\n      set({ trials, loadingTrials: false });\n    } catch (error) {\n      set({ trials: [], loadingTrials: false });\n      // Only log in non-test environments\n      if (process.env.NODE_ENV !== 'test') {\n        console.error('Failed to fetch trials:', error);\n      }\n    }\n  },\n\n  fetchIndustries: async () => {\n    try {\n      const response = await trialsAPI.getIndustries();\n      set({ industries: response.data });\n    } catch (error) {\n      // Only log in non-test environments\n      if (process.env.NODE_ENV !== 'test') {\n        console.error('Failed to load industries:', error);\n      }\n    }\n  },\n});"],"mappings":"AAEA,SAASA,SAAS,QAAQ,kBAAkB;AAgB5C,OAAO,MAAMC,iBAA8D,GAAGA,CAACC,GAAG,EAAEC,GAAG,MAAM;EAC3FC,MAAM,EAAE,EAAE;EACVC,cAAc,EAAE,EAAE;EAClBC,kBAAkB,EAAE,EAAE;EACtBC,UAAU,EAAE,EAAE;EACdC,aAAa,EAAE,KAAK;EAEpBC,cAAc,EAAE,MAAOC,OAAO,IAAK;IACjC,MAAM;MAAEL,cAAc;MAAED;IAAO,CAAC,GAAGD,GAAG,CAAC,CAAC;IACxC,MAAMQ,WAAW,GAAGN,cAAc,CAACO,QAAQ,CAACF,OAAO,CAAC;;IAEpD;IACA,MAAMG,gBAAgB,GAAGF,WAAW,GAChCN,cAAc,CAACS,MAAM,CAACC,EAAE,IAAIA,EAAE,KAAKL,OAAO,CAAC,GAC3C,CAAC,GAAGL,cAAc,EAAEK,OAAO,CAAC;IAEhC,MAAMM,aAAa,GAAGZ,MAAM,CAACa,GAAG,CAACC,CAAC,IAChCA,CAAC,CAACH,EAAE,KAAKL,OAAO,GAAG;MAAE,GAAGQ,CAAC;MAAEC,YAAY,EAAE,CAACR;IAAY,CAAC,GAAGO,CAC5D,CAAC;IAEDhB,GAAG,CAAC;MACFG,cAAc,EAAEQ,gBAAgB;MAChCT,MAAM,EAAEY;IACV,CAAC,CAAC;IAEF,IAAI;MACF,MAAMhB,SAAS,CAACS,cAAc,CAACC,OAAO,CAAC;IACzC,CAAC,CAAC,OAAOU,KAAK,EAAE;MACd;MACAlB,GAAG,CAAC;QACFG,cAAc,EAAEA,cAAc;QAC9BD,MAAM,EAAEA;MACV,CAAC,CAAC;MACF,MAAMgB,KAAK;IACb;EACF,CAAC;EAEDC,aAAa,EAAE,MAAAA,CAAA,KAAY;IACzB,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMtB,SAAS,CAACuB,YAAY,CAAC,CAAC;MAC/C,MAAMC,WAAW,GAAGF,QAAQ,CAACG,IAAI,CAACR,GAAG,CAAES,GAAQ,IAAKA,GAAG,CAACC,KAAK,CAACZ,EAAE,CAAC;MACjEb,GAAG,CAAC;QAAEG,cAAc,EAAEmB;MAAY,CAAC,CAAC;IACtC,CAAC,CAAC,OAAOJ,KAAK,EAAE;MACd;MACA,IAAIQ,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,MAAM,EAAE;QACnCC,OAAO,CAACX,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACnD;IACF;EACF,CAAC;EAEDY,gBAAgB,EAAE,MAAOzB,UAAU,IAAK;IACtCL,GAAG,CAAC;MAAEI,kBAAkB,EAAEC;IAAW,CAAC,CAAC;IACvC,IAAI;MACF,MAAMP,SAAS,CAACiC,gBAAgB,CAAC1B,UAAU,CAAC;IAC9C,CAAC,CAAC,OAAOa,KAAK,EAAE;MACd,MAAMA,KAAK;IACb;EACF,CAAC;EAEDc,WAAW,EAAE,MAAOC,MAAM,IAAK;IAC7BjC,GAAG,CAAC;MAAEM,aAAa,EAAE;IAAK,CAAC,CAAC;IAC5B,IAAI;MACF,MAAMc,QAAQ,GAAG,MAAMtB,SAAS,CAACoC,IAAI,CAACD,MAAM,CAAC;MAC7C;MACA,MAAME,UAAU,GAAGf,QAAQ,CAACG,IAAI,CAACa,OAAO,IAAIhB,QAAQ,CAACG,IAAI;MACzD;MACA,MAAMrB,MAAM,GAAGmC,KAAK,CAACC,OAAO,CAACH,UAAU,CAAC,GAAGA,UAAU,GAAG,EAAE;MAC1DnC,GAAG,CAAC;QAAEE,MAAM;QAAEI,aAAa,EAAE;MAAM,CAAC,CAAC;IACvC,CAAC,CAAC,OAAOY,KAAK,EAAE;MACdlB,GAAG,CAAC;QAAEE,MAAM,EAAE,EAAE;QAAEI,aAAa,EAAE;MAAM,CAAC,CAAC;MACzC;MACA,IAAIoB,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,MAAM,EAAE;QACnCC,OAAO,CAACX,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MACjD;IACF;EACF,CAAC;EAEDqB,eAAe,EAAE,MAAAA,CAAA,KAAY;IAC3B,IAAI;MACF,MAAMnB,QAAQ,GAAG,MAAMtB,SAAS,CAAC0C,aAAa,CAAC,CAAC;MAChDxC,GAAG,CAAC;QAAEK,UAAU,EAAEe,QAAQ,CAACG;MAAK,CAAC,CAAC;IACpC,CAAC,CAAC,OAAOL,KAAK,EAAE;MACd;MACA,IAAIQ,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,MAAM,EAAE;QACnCC,OAAO,CAACX,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MACpD;IACF;EACF;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}