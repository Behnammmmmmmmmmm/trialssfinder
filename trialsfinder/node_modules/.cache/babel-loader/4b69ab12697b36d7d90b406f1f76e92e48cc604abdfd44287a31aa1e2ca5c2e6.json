{"ast":null,"code":"import{trialsAPI}from'../../api/trials';export const createTrialsSlice=(set,get)=>({trials:[],favoriteTrials:[],selectedIndustries:[],industries:[],loadingTrials:false,toggleFavorite:async trialId=>{const{favoriteTrials,trials}=get();const isFavorited=favoriteTrials.includes(trialId);// Optimistic update\nconst updatedFavorites=isFavorited?favoriteTrials.filter(id=>id!==trialId):[...favoriteTrials,trialId];const updatedTrials=trials.map(t=>t.id===trialId?{...t,is_favorited:!isFavorited}:t);set({favoriteTrials:updatedFavorites,trials:updatedTrials});try{await trialsAPI.toggleFavorite(trialId);}catch(error){// Revert on error\nset({favoriteTrials:favoriteTrials,trials:trials});throw error;}},loadFavorites:async()=>{try{const response=await trialsAPI.getFavorites();const favoriteIds=response.data.map(fav=>fav.trial.id);set({favoriteTrials:favoriteIds});}catch(error){// Only log in non-test environments\nif(process.env.NODE_ENV!=='test'){console.error('Failed to load favorites:',error);}}},updateIndustries:async industries=>{set({selectedIndustries:industries});try{await trialsAPI.followIndustries(industries);}catch(error){throw error;}},fetchTrials:async params=>{set({loadingTrials:true});try{const response=await trialsAPI.list(params);// Handle paginated response\nconst trialsData=response.data.results||response.data;// Ensure we always have an array\nconst trials=Array.isArray(trialsData)?trialsData:[];set({trials,loadingTrials:false});}catch(error){set({trials:[],loadingTrials:false});// Only log in non-test environments\nif(process.env.NODE_ENV!=='test'){console.error('Failed to fetch trials:',error);}}},fetchIndustries:async()=>{try{const response=await trialsAPI.getIndustries();set({industries:response.data});}catch(error){// Only log in non-test environments\nif(process.env.NODE_ENV!=='test'){console.error('Failed to load industries:',error);}}}});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}