{"ast":null,"code":"import { format } from 'date-fns';\nimport { enUS, es, fr, de, ar, he } from 'date-fns/locale';\nimport { useTranslation as useI18nTranslation } from 'react-i18next';\nconst locales = {\n  en: enUS,\n  es,\n  fr,\n  de,\n  ar,\n  he\n};\nexport const useTranslation = () => {\n  const {\n    t,\n    i18n\n  } = useI18nTranslation();\n  const formatDate = function (date) {\n    let formatStr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'PP';\n    const locale = locales[i18n.language] || enUS;\n    return format(new Date(date), formatStr, {\n      locale\n    });\n  };\n  const formatCurrency = function (amount) {\n    let currency = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'USD';\n    return new Intl.NumberFormat(i18n.language, {\n      style: 'currency',\n      currency\n    }).format(amount);\n  };\n  const formatNumber = num => {\n    return new Intl.NumberFormat(i18n.language).format(num);\n  };\n  return {\n    t,\n    i18n,\n    formatDate,\n    formatCurrency,\n    formatNumber,\n    isRTL: ['ar', 'he'].includes(i18n.language)\n  };\n};\nexport { default as i18n } from './config';","map":{"version":3,"names":["format","enUS","es","fr","de","ar","he","useTranslation","useI18nTranslation","locales","en","t","i18n","formatDate","date","formatStr","arguments","length","undefined","locale","language","Date","formatCurrency","amount","currency","Intl","NumberFormat","style","formatNumber","num","isRTL","includes","default"],"sources":["C:/Users/behna/Desktop/trialssfinder/trialsfinder/src/i18n/index.ts"],"sourcesContent":["import { format } from 'date-fns';\r\nimport { enUS, es, fr, de, ar, he } from 'date-fns/locale';\r\nimport { useTranslation as useI18nTranslation } from 'react-i18next';\r\n\r\nconst locales = { en: enUS, es, fr, de, ar, he };\r\n\r\nexport const useTranslation = () => {\r\n  const { t, i18n } = useI18nTranslation();\r\n  \r\n  const formatDate = (date: Date | string, formatStr = 'PP') => {\r\n    const locale = locales[i18n.language as keyof typeof locales] || enUS;\r\n    return format(new Date(date), formatStr, { locale });\r\n  };\r\n  \r\n  const formatCurrency = (amount: number, currency = 'USD') => {\r\n    return new Intl.NumberFormat(i18n.language, {\r\n      style: 'currency',\r\n      currency,\r\n    }).format(amount);\r\n  };\r\n  \r\n  const formatNumber = (num: number) => {\r\n    return new Intl.NumberFormat(i18n.language).format(num);\r\n  };\r\n  \r\n  return {\r\n    t,\r\n    i18n,\r\n    formatDate,\r\n    formatCurrency,\r\n    formatNumber,\r\n    isRTL: ['ar', 'he'].includes(i18n.language),\r\n  };\r\n};\r\n\r\nexport { default as i18n } from './config';"],"mappings":"AAAA,SAASA,MAAM,QAAQ,UAAU;AACjC,SAASC,IAAI,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,QAAQ,iBAAiB;AAC1D,SAASC,cAAc,IAAIC,kBAAkB,QAAQ,eAAe;AAEpE,MAAMC,OAAO,GAAG;EAAEC,EAAE,EAAET,IAAI;EAAEC,EAAE;EAAEC,EAAE;EAAEC,EAAE;EAAEC,EAAE;EAAEC;AAAG,CAAC;AAEhD,OAAO,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAClC,MAAM;IAAEI,CAAC;IAAEC;EAAK,CAAC,GAAGJ,kBAAkB,CAAC,CAAC;EAExC,MAAMK,UAAU,GAAG,SAAAA,CAACC,IAAmB,EAAuB;IAAA,IAArBC,SAAS,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI;IACvD,MAAMG,MAAM,GAAGV,OAAO,CAACG,IAAI,CAACQ,QAAQ,CAAyB,IAAInB,IAAI;IACrE,OAAOD,MAAM,CAAC,IAAIqB,IAAI,CAACP,IAAI,CAAC,EAAEC,SAAS,EAAE;MAAEI;IAAO,CAAC,CAAC;EACtD,CAAC;EAED,MAAMG,cAAc,GAAG,SAAAA,CAACC,MAAc,EAAuB;IAAA,IAArBC,QAAQ,GAAAR,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,KAAK;IACtD,OAAO,IAAIS,IAAI,CAACC,YAAY,CAACd,IAAI,CAACQ,QAAQ,EAAE;MAC1CO,KAAK,EAAE,UAAU;MACjBH;IACF,CAAC,CAAC,CAACxB,MAAM,CAACuB,MAAM,CAAC;EACnB,CAAC;EAED,MAAMK,YAAY,GAAIC,GAAW,IAAK;IACpC,OAAO,IAAIJ,IAAI,CAACC,YAAY,CAACd,IAAI,CAACQ,QAAQ,CAAC,CAACpB,MAAM,CAAC6B,GAAG,CAAC;EACzD,CAAC;EAED,OAAO;IACLlB,CAAC;IACDC,IAAI;IACJC,UAAU;IACVS,cAAc;IACdM,YAAY;IACZE,KAAK,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC,CAACC,QAAQ,CAACnB,IAAI,CAACQ,QAAQ;EAC5C,CAAC;AACH,CAAC;AAED,SAASY,OAAO,IAAIpB,IAAI,QAAQ,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}