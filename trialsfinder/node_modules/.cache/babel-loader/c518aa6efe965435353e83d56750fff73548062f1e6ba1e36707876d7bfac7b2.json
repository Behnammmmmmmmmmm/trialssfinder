{"ast":null,"code":"import{create}from'zustand';import{devtools,persist,subscribeWithSelector}from'zustand/middleware';import{immer}from'zustand/middleware/immer';import{createAuthSlice}from'./slices/authSlice';import{createNotificationSlice}from'./slices/notificationSlice';import{createTrialsSlice}from'./slices/trialsSlice';import{createUISlice}from'./slices/uiSlice';export const useStore=create()(devtools(persist(subscribeWithSelector(immer((set,get,api)=>({...createAuthSlice(set,get,api),...createTrialsSlice(set,get,api),...createUISlice(set,get,api),...createNotificationSlice(set,get,api),clearLoadingStates:()=>set(state=>{state.loadingStates={};})}))),{name:'trialssfinder-store',partialize:state=>({user:state.user,favoriteTrials:state.favoriteTrials,selectedIndustries:state.selectedIndustries})}),{name:'TrialsFinder'}));","map":{"version":3,"names":["create","devtools","persist","subscribeWithSelector","immer","createAuthSlice","createNotificationSlice","createTrialsSlice","createUISlice","useStore","set","get","api","clearLoadingStates","state","loadingStates","name","partialize","user","favoriteTrials","selectedIndustries"],"sources":["C:/Users/behna/Desktop/trialssfinder/trialsfinder/src/store/index.ts"],"sourcesContent":["import { create } from 'zustand';\nimport { devtools, persist, subscribeWithSelector } from 'zustand/middleware';\nimport { immer } from 'zustand/middleware/immer';\n\nimport { AuthState, createAuthSlice } from './slices/authSlice';\nimport { NotificationState, createNotificationSlice } from './slices/notificationSlice';\nimport { TrialsState, createTrialsSlice } from './slices/trialsSlice';\nimport { UIState, createUISlice } from './slices/uiSlice';\n\nexport interface AppState extends AuthState, TrialsState, UIState, NotificationState {\n  clearLoadingStates: () => void;\n}\n\nexport const useStore = create<AppState>()(\n  devtools(\n    persist(\n      subscribeWithSelector(\n        immer((set, get, api) => ({\n          ...createAuthSlice(set, get, api),\n          ...createTrialsSlice(set, get, api),\n          ...createUISlice(set, get, api),\n          ...createNotificationSlice(set, get, api),\n          clearLoadingStates: () => set((state) => {\n            state.loadingStates = {};\n          }),\n        }))\n      ),\n      {\n        name: 'trialssfinder-store',\n        partialize: (state) => ({\n          user: state.user,\n          favoriteTrials: state.favoriteTrials,\n          selectedIndustries: state.selectedIndustries,\n        }),\n      }\n    ),\n    { name: 'TrialsFinder' }\n  )\n);"],"mappings":"AAAA,OAASA,MAAM,KAAQ,SAAS,CAChC,OAASC,QAAQ,CAAEC,OAAO,CAAEC,qBAAqB,KAAQ,oBAAoB,CAC7E,OAASC,KAAK,KAAQ,0BAA0B,CAEhD,OAAoBC,eAAe,KAAQ,oBAAoB,CAC/D,OAA4BC,uBAAuB,KAAQ,4BAA4B,CACvF,OAAsBC,iBAAiB,KAAQ,sBAAsB,CACrE,OAAkBC,aAAa,KAAQ,kBAAkB,CAMzD,MAAO,MAAM,CAAAC,QAAQ,CAAGT,MAAM,CAAW,CAAC,CACxCC,QAAQ,CACNC,OAAO,CACLC,qBAAqB,CACnBC,KAAK,CAAC,CAACM,GAAG,CAAEC,GAAG,CAAEC,GAAG,IAAM,CACxB,GAAGP,eAAe,CAACK,GAAG,CAAEC,GAAG,CAAEC,GAAG,CAAC,CACjC,GAAGL,iBAAiB,CAACG,GAAG,CAAEC,GAAG,CAAEC,GAAG,CAAC,CACnC,GAAGJ,aAAa,CAACE,GAAG,CAAEC,GAAG,CAAEC,GAAG,CAAC,CAC/B,GAAGN,uBAAuB,CAACI,GAAG,CAAEC,GAAG,CAAEC,GAAG,CAAC,CACzCC,kBAAkB,CAAEA,CAAA,GAAMH,GAAG,CAAEI,KAAK,EAAK,CACvCA,KAAK,CAACC,aAAa,CAAG,CAAC,CAAC,CAC1B,CAAC,CACH,CAAC,CAAC,CACJ,CAAC,CACD,CACEC,IAAI,CAAE,qBAAqB,CAC3BC,UAAU,CAAGH,KAAK,GAAM,CACtBI,IAAI,CAAEJ,KAAK,CAACI,IAAI,CAChBC,cAAc,CAAEL,KAAK,CAACK,cAAc,CACpCC,kBAAkB,CAAEN,KAAK,CAACM,kBAC5B,CAAC,CACH,CACF,CAAC,CACD,CAAEJ,IAAI,CAAE,cAAe,CACzB,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}