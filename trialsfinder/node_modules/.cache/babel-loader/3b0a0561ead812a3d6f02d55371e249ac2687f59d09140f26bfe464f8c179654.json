{"ast":null,"code":"import{notificationsAPI}from'../../api/notifications';export const createNotificationSlice=(set,get)=>({notifications:[],unreadCount:0,fetchNotifications:async()=>{try{const response=await notificationsAPI.list();const notifications=response.data;const unreadCount=notifications.filter(n=>!n.is_read).length;set({notifications,unreadCount});}catch(error){console.error('Failed to fetch notifications:',error);}},markAsRead:async id=>{// Optimistic update\nconst currentNotifications=get().notifications;const currentUnreadCount=get().unreadCount;const updatedNotifications=currentNotifications.map(n=>n.id===id?{...n,is_read:true}:n);const updatedUnreadCount=Math.max(0,currentUnreadCount-1);set({notifications:updatedNotifications,unreadCount:updatedUnreadCount});try{await notificationsAPI.markRead(id);}catch(error){// Revert on error\nset({notifications:currentNotifications,unreadCount:currentUnreadCount});throw error;}}});","map":{"version":3,"names":["notificationsAPI","createNotificationSlice","set","get","notifications","unreadCount","fetchNotifications","response","list","data","filter","n","is_read","length","error","console","markAsRead","id","currentNotifications","currentUnreadCount","updatedNotifications","map","updatedUnreadCount","Math","max","markRead"],"sources":["C:/Users/behna/Desktop/trialssfinder/trialsfinder/src/store/slices/notificationSlice.ts"],"sourcesContent":["import { StateCreator } from 'zustand';\nimport { Notification } from '../../types';\nimport { notificationsAPI } from '../../api/notifications';\nimport { AppState } from '../index';\n\nexport interface NotificationState {\n  notifications: Notification[];\n  unreadCount: number;\n  fetchNotifications: () => Promise<void>;\n  markAsRead: (id: number) => Promise<void>;\n}\n\nexport const createNotificationSlice: StateCreator<AppState, [], [], NotificationState> = (set, get) => ({\n  notifications: [],\n  unreadCount: 0,\n\n  fetchNotifications: async () => {\n    try {\n      const response = await notificationsAPI.list();\n      const notifications = response.data;\n      const unreadCount = notifications.filter((n: Notification) => !n.is_read).length;\n      set({ notifications, unreadCount });\n    } catch (error) {\n      console.error('Failed to fetch notifications:', error);\n    }\n  },\n\n  markAsRead: async (id) => {\n    // Optimistic update\n    const currentNotifications = get().notifications;\n    const currentUnreadCount = get().unreadCount;\n    \n    const updatedNotifications = currentNotifications.map(n => \n      n.id === id ? { ...n, is_read: true } : n\n    );\n    const updatedUnreadCount = Math.max(0, currentUnreadCount - 1);\n    \n    set({ \n      notifications: updatedNotifications,\n      unreadCount: updatedUnreadCount\n    });\n\n    try {\n      await notificationsAPI.markRead(id);\n    } catch (error) {\n      // Revert on error\n      set({ \n        notifications: currentNotifications,\n        unreadCount: currentUnreadCount\n      });\n      throw error;\n    }\n  },\n});"],"mappings":"AAEA,OAASA,gBAAgB,KAAQ,yBAAyB,CAU1D,MAAO,MAAM,CAAAC,uBAA0E,CAAGA,CAACC,GAAG,CAAEC,GAAG,IAAM,CACvGC,aAAa,CAAE,EAAE,CACjBC,WAAW,CAAE,CAAC,CAEdC,kBAAkB,CAAE,KAAAA,CAAA,GAAY,CAC9B,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAP,gBAAgB,CAACQ,IAAI,CAAC,CAAC,CAC9C,KAAM,CAAAJ,aAAa,CAAGG,QAAQ,CAACE,IAAI,CACnC,KAAM,CAAAJ,WAAW,CAAGD,aAAa,CAACM,MAAM,CAAEC,CAAe,EAAK,CAACA,CAAC,CAACC,OAAO,CAAC,CAACC,MAAM,CAChFX,GAAG,CAAC,CAAEE,aAAa,CAAEC,WAAY,CAAC,CAAC,CACrC,CAAE,MAAOS,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,CAAEA,KAAK,CAAC,CACxD,CACF,CAAC,CAEDE,UAAU,CAAE,KAAO,CAAAC,EAAE,EAAK,CACxB;AACA,KAAM,CAAAC,oBAAoB,CAAGf,GAAG,CAAC,CAAC,CAACC,aAAa,CAChD,KAAM,CAAAe,kBAAkB,CAAGhB,GAAG,CAAC,CAAC,CAACE,WAAW,CAE5C,KAAM,CAAAe,oBAAoB,CAAGF,oBAAoB,CAACG,GAAG,CAACV,CAAC,EACrDA,CAAC,CAACM,EAAE,GAAKA,EAAE,CAAG,CAAE,GAAGN,CAAC,CAAEC,OAAO,CAAE,IAAK,CAAC,CAAGD,CAC1C,CAAC,CACD,KAAM,CAAAW,kBAAkB,CAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,CAAEL,kBAAkB,CAAG,CAAC,CAAC,CAE9DjB,GAAG,CAAC,CACFE,aAAa,CAAEgB,oBAAoB,CACnCf,WAAW,CAAEiB,kBACf,CAAC,CAAC,CAEF,GAAI,CACF,KAAM,CAAAtB,gBAAgB,CAACyB,QAAQ,CAACR,EAAE,CAAC,CACrC,CAAE,MAAOH,KAAK,CAAE,CACd;AACAZ,GAAG,CAAC,CACFE,aAAa,CAAEc,oBAAoB,CACnCb,WAAW,CAAEc,kBACf,CAAC,CAAC,CACF,KAAM,CAAAL,KAAK,CACb,CACF,CACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}