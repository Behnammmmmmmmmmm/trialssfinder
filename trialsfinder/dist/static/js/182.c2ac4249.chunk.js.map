{"version":3,"file":"static/js/182.c2ac4249.chunk.js","mappings":"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","sources":["webpack://trialsfinder/./src/pages/SubscriptionPage.tsx","webpack://trialsfinder/./src/api/subscriptions.ts"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport { subscriptionsAPI } from '../api/subscriptions';\r\nimport { PaymentMethod, Subscription } from '../types';\r\n\r\nexport const SubscriptionPage: React.FC = () => {\r\n  const { trialId } = useParams<{ trialId?: string }>();\r\n  const navigate = useNavigate();\r\n  const [paymentMethods, setPaymentMethods] = useState<PaymentMethod[]>([]);\r\n  const [subscriptions, setSubscriptions] = useState<Subscription[]>([]);\r\n  const [invoices, setInvoices] = useState<any[]>([]);\r\n  const [address, setAddress] = useState('');\r\n  const [newMethod, setNewMethod] = useState({\r\n    method_type: 'credit_card',\r\n    last_four: '',\r\n    is_default: false\r\n  });\r\n\r\n  useEffect(() => {\r\n    loadData();\r\n  }, []);\r\n\r\n  const loadData = async () => {\r\n    try {\r\n      const methodsRes = await subscriptionsAPI.getPaymentMethods();\r\n      setPaymentMethods(methodsRes.data);\r\n\r\n      const subsRes = await subscriptionsAPI.getSubscriptions();\r\n      setSubscriptions(subsRes.data);\r\n\r\n      const invoicesRes = await subscriptionsAPI.getInvoices();\r\n      setInvoices(invoicesRes.data);\r\n    } catch (error) {\r\n      console.error('Failed to load subscription data:', error);\r\n    }\r\n  };\r\n\r\n  const handleAddPaymentMethod = async () => {\r\n    try {\r\n      await subscriptionsAPI.addPaymentMethod(newMethod);\r\n      loadData();\r\n      setNewMethod({ method_type: 'credit_card', last_four: '', is_default: false });\r\n    } catch (error) {\r\n      console.error('Failed to add payment method:', error);\r\n    }\r\n  };\r\n\r\n  const handleDeleteMethod = async (id: number) => {\r\n    try {\r\n      await subscriptionsAPI.deletePaymentMethod(id);\r\n      loadData();\r\n    } catch (error) {\r\n      console.error('Failed to delete payment method:', error);\r\n    }\r\n  };\r\n\r\n  const handleSetDefault = async (id: number) => {\r\n    try {\r\n      await subscriptionsAPI.setDefaultPaymentMethod(id);\r\n      loadData();\r\n    } catch (error) {\r\n      console.error('Failed to set default payment method:', error);\r\n    }\r\n  };\r\n\r\n  const handleUpdateAddress = async () => {\r\n    try {\r\n      await subscriptionsAPI.updateAddress(address);\r\n      alert('Address updated');\r\n    } catch (error) {\r\n      console.error('Failed to update address:', error);\r\n    }\r\n  };\r\n\r\n  const handlePayment = async (methodId: number) => {\r\n    if (!trialId) {\r\n      return;\r\n    }\r\n    try {\r\n      await subscriptionsAPI.createSubscription({\r\n        trial_id: parseInt(trialId),\r\n        payment_method_id: methodId\r\n      });\r\n      navigate('/payment-success');\r\n    } catch (error) {\r\n      console.error('Payment failed:', error);\r\n    }\r\n  };\r\n\r\n  if (trialId) {\r\n    return (\r\n      <div>\r\n        <h1>Payment for Trial</h1>\r\n        <h3>Select Payment Method</h3>\r\n        {paymentMethods.map(method => (\r\n          <div key={method.id}>\r\n            <span>{method.method_type} ending in {method.last_four}</span>\r\n            <button onClick={() => handlePayment(method.id)}>Pay with this method</button>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>Subscription Management</h1>\r\n\r\n      <h2>Your Subscriptions</h2>\r\n      {subscriptions.map(sub => (\r\n        <div key={sub.id}>\r\n          <h3>{sub.trial_name}</h3>\r\n          <p>Amount: ${sub.amount}</p>\r\n          <p>Status: {sub.status}</p>\r\n          <p>Date: {sub.created_at}</p>\r\n        </div>\r\n      ))}\r\n\r\n      <h2>Address</h2>\r\n      <input\r\n        type=\"text\"\r\n        value={address}\r\n        onChange={(e) => setAddress(e.target.value)}\r\n        placeholder=\"Address\"\r\n      />\r\n      <button onClick={handleUpdateAddress}>Update Address</button>\r\n\r\n      <h2>Payment Methods</h2>\r\n      {paymentMethods.map(method => (\r\n        <div key={method.id}>\r\n          <span>{method.method_type} ending in {method.last_four}</span>\r\n          {method.is_default && <span> (Default)</span>}\r\n          <button onClick={() => handleSetDefault(method.id)}>Make Default</button>\r\n          <button onClick={() => handleDeleteMethod(method.id)}>Remove</button>\r\n        </div>\r\n      ))}\r\n\r\n      <h3>Add Payment Method</h3>\r\n      <select \r\n        value={newMethod.method_type} \r\n        onChange={(e) => setNewMethod({...newMethod, method_type: e.target.value})}\r\n      >\r\n        <option value=\"credit_card\">Credit Card</option>\r\n        <option value=\"paypal\">PayPal</option>\r\n      </select>\r\n      <input\r\n        type=\"text\"\r\n        value={newMethod.last_four}\r\n        onChange={(e) => setNewMethod({...newMethod, last_four: e.target.value})}\r\n        placeholder=\"Last 4 digits\"\r\n        maxLength={4}\r\n      />\r\n      <label>\r\n        <input\r\n          type=\"checkbox\"\r\n          checked={newMethod.is_default}\r\n          onChange={(e) => setNewMethod({...newMethod, is_default: e.target.checked})}\r\n        />\r\n        Set as default\r\n      </label>\r\n      <button onClick={handleAddPaymentMethod}>Add</button>\r\n\r\n      <h2>Invoices</h2>\r\n      {invoices.map(invoice => (\r\n        <div key={invoice.id}>\r\n          <p>Amount: ${invoice.amount}</p>\r\n          <p>Date: {invoice.created_at}</p>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SubscriptionPage;","import api from '../utils/api';\r\n\r\nexport const subscriptionsAPI = {\r\n  getPaymentMethods: () => api.get('/subscriptions/payment-methods/'),\r\n  addPaymentMethod: (data: any) => api.post('/subscriptions/payment-methods/', data),\r\n  deletePaymentMethod: (id: number) => api.delete(`/subscriptions/payment-methods/${id}/`),\r\n  setDefaultPaymentMethod: (id: number) => api.post(`/subscriptions/payment-methods/${id}/set-default/`),\r\n  getSubscriptions: () => api.get('/subscriptions/'),\r\n  createSubscription: (data: any) => api.post('/subscriptions/create/', data),\r\n  getInvoices: () => api.get('/subscriptions/invoices/'),\r\n  updateAddress: (address: string) => api.post('/subscriptions/update-address/', { address }),\r\n};"],"names":["SubscriptionPage","trialId","useParams","navigate","useNavigate","paymentMethods","setPaymentMethods","useState","subscriptions","setSubscriptions","invoices","setInvoices","address","setAddress","newMethod","setNewMethod","method_type","last_four","is_default","useEffect","loadData","async","methodsRes","api","get","data","subsRes","invoicesRes","error","console","_jsxs","children","_jsx","map","method","onClick","trial_id","parseInt","payment_method_id","methodId","post","handlePayment","id","sub","trial_name","amount","status","created_at","type","value","onChange","e","target","placeholder","subscriptionsAPI","alert","handleSetDefault","delete","handleDeleteMethod","maxLength","checked","invoice"],"sourceRoot":""}