{"version":3,"file":"static/js/852.c5f69850.chunk.js","mappings":"qMAMO,MAAMA,EAA0BA,KACrC,MAAOC,IAAgBC,EAAAA,EAAAA,OAChBC,EAAQC,IAAaC,EAAAA,EAAAA,UAAkB,KACvCC,EAAeC,IAAoBF,EAAAA,EAAAA,UAAwB,OAC3DG,EAAWC,IAAgBJ,EAAAA,EAAAA,UAAS,CACzCK,WAAY,GACZC,SAAU,MAELC,EAASC,IAAcR,EAAAA,EAAAA,UAAc,MAEtCS,GAAcC,EAAAA,EAAAA,aAAYC,UAC9B,GAAKV,EAGL,IACE,MAAMW,QAAiBC,EAAAA,EAAaC,gBAAgBb,EAAeE,GACnEK,EAAWI,EAASG,KACtB,CAAE,MAAOC,QACPC,CACF,GACC,CAAChB,EAAeE,KAEnBe,EAAAA,EAAAA,WAAU,KACRC,IACA,MAAMC,EAAUxB,EAAayB,IAAI,SAC7BD,GACFlB,EAAiBoB,SAASF,KAE3B,CAACxB,KAEJsB,EAAAA,EAAAA,WAAU,KACJjB,GACFQ,KAED,CAACR,EAAeE,EAAWM,IAE9B,MAAMU,EAAaR,UACjB,IACE,MAAMC,QAAiBW,EAAAA,EAAUC,gBAE3BC,EAAab,EAASG,KAAKW,SAAWd,EAASG,KACrDhB,EAAU4B,MAAMC,QAAQH,GAAcA,EAAa,GACrD,CAAE,MAAOT,QACPC,EACAlB,EAAU,GACZ,GAGF,OACE8B,EAAAA,EAAAA,IAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,GAAA,MAAAD,SAAI,yBAEJD,EAAAA,EAAAA,IAAA,OAAAC,SAAA,EACED,EAAAA,EAAAA,IAAA,UACEG,MAAO/B,GAAiB,GACxBgC,SAAWC,GAAMhC,EAAiBgC,EAAEC,OAAOH,MAAQV,SAASY,EAAEC,OAAOH,OAAS,MAAMF,SAAA,EAEpFC,EAAAA,EAAAA,GAAA,UAAQC,MAAM,GAAEF,SAAC,mBAChBhC,EAAOsC,IAAIC,IACVN,EAAAA,EAAAA,GAAA,UAAuBC,MAAOK,EAAMC,GAAGR,SAAEO,EAAME,OAAlCF,EAAMC,SAIvBP,EAAAA,EAAAA,GAAA,SACES,KAAK,OACLR,MAAO7B,EAAUE,WACjB4B,SAAWC,GAAM9B,EAAa,IAAID,EAAWE,WAAY6B,EAAEC,OAAOH,WAEpED,EAAAA,EAAAA,GAAA,SACES,KAAK,OACLR,MAAO7B,EAAUG,SACjB2B,SAAWC,GAAM9B,EAAa,IAAID,EAAWG,SAAU4B,EAAEC,OAAOH,aAInEzB,IACCsB,EAAAA,EAAAA,IAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,GAAA,MAAAD,SAAI,mBACJD,EAAAA,EAAAA,IAAA,KAAAC,SAAA,CAAG,UAAQvB,EAAQkC,UACnBZ,EAAAA,EAAAA,IAAA,KAAAC,SAAA,CAAG,WAASvB,EAAQmC,WACpBb,EAAAA,EAAAA,IAAA,KAAAC,SAAA,CAAG,gBAAcvB,EAAQoC,YAAYC,QAAQ,GAAG,QAEhDb,EAAAA,EAAAA,GAAA,MAAAD,SAAI,iBACHvB,EAAQsC,YAAYT,IAAKU,IACxBf,EAAAA,EAAAA,GAAA,OAAAD,UACED,EAAAA,EAAAA,IAAA,QAAAC,SAAA,CAAOgB,EAAIC,KAAK,YAAUD,EAAIL,MAAM,aAAWK,EAAIJ,WAD3CI,EAAIC,QAKhBhB,EAAAA,EAAAA,GAAA,MAAAD,SAAI,kBACHvB,EAAQyC,aAAaZ,IAAKU,IACzBf,EAAAA,EAAAA,GAAA,OAAAD,UACED,EAAAA,EAAAA,IAAA,QAAAC,SAAA,CAAOgB,EAAIC,KAAK,aAAWD,EAAIG,WADvBH,EAAIC,cAU1B,G","sources":["webpack://trialsfinder/./src/pages/AnalyticsPage.tsx"],"sourcesContent":["import React, { useEffect, useState, useCallback } from 'react';\r\nimport { useSearchParams } from 'react-router-dom';\r\nimport { analyticsAPI } from '../api/analytics';\r\nimport { trialsAPI } from '../api/trials';\r\nimport { Trial } from '../types';\r\n\r\nexport const AnalyticsPage: React.FC = () => {\r\n  const [searchParams] = useSearchParams();\r\n  const [trials, setTrials] = useState<Trial[]>([]);\r\n  const [selectedTrial, setSelectedTrial] = useState<number | null>(null);\r\n  const [dateRange, setDateRange] = useState({\r\n    start_date: '',\r\n    end_date: ''\r\n  });\r\n  const [metrics, setMetrics] = useState<any>(null);\r\n\r\n  const loadMetrics = useCallback(async () => {\r\n    if (!selectedTrial) {\r\n      return;\r\n    }\r\n    try {\r\n      const response = await analyticsAPI.getTrialMetrics(selectedTrial, dateRange);\r\n      setMetrics(response.data);\r\n    } catch (error) {\r\n      console.error('Failed to load metrics:', error);\r\n    }\r\n  }, [selectedTrial, dateRange]);\r\n\r\n  useEffect(() => {\r\n    loadTrials();\r\n    const trialId = searchParams.get('trial');\r\n    if (trialId) {\r\n      setSelectedTrial(parseInt(trialId));\r\n    }\r\n  }, [searchParams]);\r\n\r\n  useEffect(() => {\r\n    if (selectedTrial) {\r\n      loadMetrics();\r\n    }\r\n  }, [selectedTrial, dateRange, loadMetrics]);\r\n\r\n  const loadTrials = async () => {\r\n    try {\r\n      const response = await trialsAPI.companyTrials();\r\n      // Handle both paginated and non-paginated responses\r\n      const trialsData = response.data.results || response.data;\r\n      setTrials(Array.isArray(trialsData) ? trialsData : []);\r\n    } catch (error) {\r\n      console.error('Failed to load trials:', error);\r\n      setTrials([]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Analytics Dashboard</h1>\r\n\r\n      <div>\r\n        <select \r\n          value={selectedTrial || ''} \r\n          onChange={(e) => setSelectedTrial(e.target.value ? parseInt(e.target.value) : null)}\r\n        >\r\n          <option value=\"\">Select a trial</option>\r\n          {trials.map(trial => (\r\n            <option key={trial.id} value={trial.id}>{trial.title}</option>\r\n          ))}\r\n        </select>\r\n\r\n        <input\r\n          type=\"date\"\r\n          value={dateRange.start_date}\r\n          onChange={(e) => setDateRange({...dateRange, start_date: e.target.value})}\r\n        />\r\n        <input\r\n          type=\"date\"\r\n          value={dateRange.end_date}\r\n          onChange={(e) => setDateRange({...dateRange, end_date: e.target.value})}\r\n        />\r\n      </div>\r\n\r\n      {metrics && (\r\n        <div>\r\n          <h2>Summary Stats</h2>\r\n          <p>Views: {metrics.views}</p>\r\n          <p>Clicks: {metrics.clicks}</p>\r\n          <p>Conversions: {metrics.conversions.toFixed(2)}%</p>\r\n\r\n          <h2>Weekly Chart</h2>\r\n          {metrics.weekly_data.map((day: any) => (\r\n            <div key={day.date}>\r\n              <span>{day.date}: Views: {day.views}, Clicks: {day.clicks}</span>\r\n            </div>\r\n          ))}\r\n\r\n          <h2>Monthly Chart</h2>\r\n          {metrics.monthly_data.map((day: any) => (\r\n            <div key={day.date}>\r\n              <span>{day.date}: Events: {day.events}</span>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AnalyticsPage;"],"names":["AnalyticsPage","searchParams","useSearchParams","trials","setTrials","useState","selectedTrial","setSelectedTrial","dateRange","setDateRange","start_date","end_date","metrics","setMetrics","loadMetrics","useCallback","async","response","analyticsAPI","getTrialMetrics","data","error","console","useEffect","loadTrials","trialId","get","parseInt","trialsAPI","companyTrials","trialsData","results","Array","isArray","_jsxs","children","_jsx","value","onChange","e","target","map","trial","id","title","type","views","clicks","conversions","toFixed","weekly_data","day","date","monthly_data","events"],"sourceRoot":""}